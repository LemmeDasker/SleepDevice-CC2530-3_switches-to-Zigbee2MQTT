###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               22/Sep/2023  19:42:32
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\Source\hal_key.c
#    Command line       =  
#        -f C:\Users\Flemming\AppData\Local\Temp\EW7D83.tmp ("C:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\Source\hal_key.c" -D
#        SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xPOWER_SAVING
#        -D NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D
#        xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
#        xLEGACY_LCD_DEBUG -D xLCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE
#        -D ZCL_READ -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D xZCL_SCENES
#        -D xZCL_GROUPS -D ZCL_ON_OFF -D xZCL_DISCOVER -lC "C:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\EndDeviceEB\List"
#        -lA "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "C:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "C:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\" -I
#        "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  Danish_DNK.1252
#    List file          =  
#        C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\EndDeviceEB\List\hal_key.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\GenericApp\CC2530DB\EndDeviceEB\Obj\hal_key.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack 3.0.2\Projects\zstack\HomeAutomation\GenericApp\Source\hal_key.c
      1          /**************************************************************************************************
      2            Filename:       hal_key.c
      3            Revised:        $Date: 2010-09-15 19:02:45 -0700 (Wed, 15 Sep 2010) $
      4            Revision:       $Revision: 23815 $
      5          
      6            Description:    This file contains the interface to the HAL KEY Service.
      7          
      8          
      9            Copyright 2006-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          /*********************************************************************
     40           NOTE: If polling is used, the hal_driver task schedules the KeyRead()
     41                 to occur every 100ms.  This should be long enough to naturally
     42                 debounce the keys.  The KeyRead() function remembers the key
     43                 state of the previous poll and will only return a non-zero
     44                 value if the key state changes.
     45          
     46           NOTE: If interrupts are used, the KeyRead() function is scheduled
     47                 25ms after the interrupt occurs by the ISR.  This delay is used
     48                 for key debouncing.  The ISR disables any further Key interrupt
     49                 until KeyRead() is executed.  KeyRead() will re-enable Key
     50                 interrupts after executing.  Unlike polling, when interrupts
     51                 are enabled, the previous key state is not remembered.  This
     52                 means that KeyRead() will return the current state of the keys
     53                 (not a change in state of the keys).
     54          
     55           NOTE: If interrupts are used, the KeyRead() fucntion is scheduled by
     56                 the ISR.  Therefore, the joystick movements will only be detected
     57                 during a pushbutton interrupt caused by S1 or the center joystick
     58                 pushbutton.
     59          
     60           NOTE: When a switch like S1 is pushed, the S1 signal goes from a normally
     61                 high state to a low state.  This transition is typically clean.  The
     62                 duration of the low state is around 200ms.  When the signal returns
     63                 to the high state, there is a high likelihood of signal bounce, which
     64                 causes a unwanted interrupts.  Normally, we would set the interrupt
     65                 edge to falling edge to generate an interrupt when S1 is pushed, but
     66                 because of the signal bounce, it is better to set the edge to rising
     67                 edge to generate an interrupt when S1 is released.  The debounce logic
     68                 can then filter out the signal bounce.  The result is that we typically
     69                 get only 1 interrupt per button push.  This mechanism is not totally
     70                 foolproof because occasionally, signal bound occurs during the falling
     71                 edge as well.  A similar mechanism is used to handle the joystick
     72                 pushbutton on the DB.  For the EB, we do not have independent control
     73                 of the interrupt edge for the S1 and center joystick pushbutton.  As
     74                 a result, only one or the other pushbuttons work reasonably well with
     75                 interrupts.  The default is the make the S1 switch on the EB work more
     76                 reliably.
     77          
     78          *********************************************************************/
     79          
     80          /**************************************************************************************************
     81           *                                            INCLUDES
     82           **************************************************************************************************/
     83          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x89
   \   unsigned char volatile __sfr P0IFG
   \                     P0IFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8b
   \   unsigned char volatile __sfr P2IFG
   \                     P2IFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8c
   \   unsigned char volatile __sfr PICTL
   \                     PICTL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9a
   \   unsigned char volatile __sfr IEN2
   \                     IEN2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa0
   \   union <unnamed> volatile __sfr _A_P2
   \                     _A_P2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xab
   \   unsigned char volatile __sfr P0IEN
   \                     P0IEN:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xac
   \   unsigned char volatile __sfr P2IEN
   \                     P2IEN:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb8
   \   union <unnamed> volatile __sfr _A_IEN1
   \                     _A_IEN1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc0
   \   union <unnamed> volatile __sfr _A_IRCON
   \                     _A_IRCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe8
   \   union <unnamed> volatile __sfr _A_IRCON2
   \                     _A_IRCON2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf5
   \   unsigned char volatile __sfr P2SEL
   \                     P2SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
     84          #include "hal_defs.h"
     85          #include "hal_types.h"
     86          #include "hal_board.h"
     87          #include "hal_drivers.h"
     88          #include "hal_adc.h"
     89          #include "hal_key.h"
     90          #include "osal.h"
     91          
     92          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
     93          
     94          /**************************************************************************************************
     95           *                                              MACROS
     96           **************************************************************************************************/
     97          
     98          /**************************************************************************************************
     99           *                                            CONSTANTS
    100           **************************************************************************************************/
    101          #define HAL_KEY_RISING_EDGE   0
    102          #define HAL_KEY_FALLING_EDGE  1
    103          
    104          #define HAL_KEY_DEBOUNCE_VALUE  25
    105          
    106          /* CPU port interrupt */
    107          #define HAL_KEY_CPU_PORT_0_IF P0IF
    108          #define HAL_KEY_CPU_PORT_2_IF P2IF
    109          
    110          /* SW_6 is at P0.1 */
    111          #define HAL_KEY_SW_6_PORT   P0
    112          #define HAL_KEY_SW_6_BIT    BV(1)
    113          #define HAL_KEY_SW_6_SEL    P0SEL
    114          #define HAL_KEY_SW_6_DIR    P0DIR
    115          /* edge interrupt */
    116          #define HAL_KEY_SW_6_EDGEBIT  BV(0)
    117          #define HAL_KEY_SW_6_EDGE     HAL_KEY_FALLING_EDGE
    118          /* SW_6 interrupts */
    119          #define HAL_KEY_SW_6_IEN      IEN1  /* CPU interrupt mask register */
    120          #define HAL_KEY_SW_6_IENBIT   BV(5) /* Mask bit for all of Port_0 */
    121          #define HAL_KEY_SW_6_ICTL     P0IEN /* Port Interrupt Control register */
    122          #define HAL_KEY_SW_6_ICTLBIT  BV(1) /* P0IEN - P0.1 enable/disable bit */
    123          #define HAL_KEY_SW_6_PXIFG    P0IFG /* Interrupt flag at source */
    124          
    125          
    126          /* SW_1 is at P2.0 */
    127          #define HAL_KEY_SW_1_PORT   P2
    128          #define HAL_KEY_SW_1_BIT    BV(0)
    129          #define HAL_KEY_SW_1_SEL    P2SEL
    130          #define HAL_KEY_SW_1_DIR    P2DIR
    131          /* edge interrupt */
    132          #define HAL_KEY_SW_1_EDGEBIT  BV(3)
    133          #define HAL_KEY_SW_1_EDGE     HAL_KEY_FALLING_EDGE
    134          /* Joy move interrupts */
    135          #define HAL_KEY_SW_1_IEN      IEN2  /* CPU interrupt mask register */
    136          #define HAL_KEY_SW_1_IENBIT   BV(1) /* Mask bit for all of Port_2 */
    137          #define HAL_KEY_SW_1_ICTL     P2IEN /* Port Interrupt Control register */
    138          #define HAL_KEY_SW_1_ICTLBIT  BV(0) /* P2IENL - P2.0<->P2.3 enable/disable bit */
    139          #define HAL_KEY_SW_1_PXIFG    P2IFG /* Interrupt flag at source */
    140          
    141          /**************************************************************************************************
    142           *                                            TYPEDEFS
    143           **************************************************************************************************/
    144          
    145          
    146          /**************************************************************************************************
    147           *                                        GLOBAL VARIABLES
    148           **************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    149          static halKeyCBack_t pHalKeyProcessFunction;
   \                     pHalKeyProcessFunction:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          static uint8 HalKeyConfigured;
   \                     HalKeyConfigured:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151          bool Hal_KeyIntEnable;            /* interrupt enable/disable flag */
   \                     Hal_KeyIntEnable:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    152          
    153          /**************************************************************************************************
    154           *                                        FUNCTIONS - Local
    155           **************************************************************************************************/
    156          void halProcessKeyInterrupt(void);
    157          uint8 halGetJoyKeyInput(void);
    158          
    159          
    160          
    161          /**************************************************************************************************
    162           *                                        FUNCTIONS - API
    163           **************************************************************************************************/
    164          
    165          
    166          /**************************************************************************************************
    167           * @fn      HalKeyInit
    168           *
    169           * @brief   Initilize Key Service
    170           *
    171           * @param   none
    172           *
    173           * @return  None
    174           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    175          void HalKeyInit( void )
   \                     HalKeyInit:
    176          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    177            /* Initialize previous key to 0 */
    178          
    179            HAL_KEY_SW_6_SEL &= ~(HAL_KEY_SW_6_BIT);    /* Set pin function to GPIO */
   \   000004   53F3FD       ANL       0xf3,#0xfd
    180            HAL_KEY_SW_6_DIR &= ~(HAL_KEY_SW_6_BIT);    /* Set pin direction to Input */
   \   000007   53FDFD       ANL       0xfd,#0xfd
    181          
    182            HAL_KEY_SW_1_SEL &= ~(HAL_KEY_SW_1_BIT); /* Set pin function to GPIO */
   \   00000A   53F5FE       ANL       0xf5,#0xfe
    183            HAL_KEY_SW_1_DIR &= ~(HAL_KEY_SW_1_BIT); /* Set pin direction to Input */
   \   00000D   53FFFE       ANL       0xff,#0xfe
    184          
    185          
    186            /* Initialize callback function */
    187            pHalKeyProcessFunction  = NULL;
   \   000010   90....       MOV       DPTR,#pHalKeyProcessFunction
   \   000013   E4           CLR       A
   \   000014   F0           MOVX      @DPTR,A
   \   000015   A3           INC       DPTR
   \   000016   F0           MOVX      @DPTR,A
    188          
    189            /* Start with key is not configured */
    190            HalKeyConfigured = FALSE;
   \   000017   90....       MOV       DPTR,#HalKeyConfigured
   \   00001A   F0           MOVX      @DPTR,A
    191          }
   \   00001B   02....       LJMP      ?Subroutine0 & 0xFFFF
   \   00001E                REQUIRE P0SEL
   \   00001E                REQUIRE P0DIR
   \   00001E                REQUIRE P2SEL
   \   00001E                REQUIRE P2DIR

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    192          
    193          
    194          /**************************************************************************************************
    195           * @fn      HalKeyConfig
    196           *
    197           * @brief   Configure the Key serivce
    198           *
    199           * @param   interruptEnable - TRUE/FALSE, enable/disable interrupt
    200           *          cback - pointer to the CallBack function
    201           *
    202           * @return  None
    203           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    204          void HalKeyConfig (bool interruptEnable, halKeyCBack_t cback)
   \                     HalKeyConfig:
    205          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    206            /* Enable/Disable Interrupt or */
    207            Hal_KeyIntEnable = interruptEnable;
   \   000006   90....       MOV       DPTR,#Hal_KeyIntEnable
   \   000009   F0           MOVX      @DPTR,A
    208          
    209            /* Register the callback fucntion */
    210            pHalKeyProcessFunction = cback;
   \   00000A   90....       MOV       DPTR,#pHalKeyProcessFunction
   \   00000D   EA           MOV       A,R2
   \   00000E   F0           MOVX      @DPTR,A
   \   00000F   A3           INC       DPTR
   \   000010   EB           MOV       A,R3
   \   000011   F0           MOVX      @DPTR,A
    211          
    212            /* Determine if interrupt is enable or not */
    213            if (Hal_KeyIntEnable)
   \   000012   90....       MOV       DPTR,#Hal_KeyIntEnable
   \   000015   E0           MOVX      A,@DPTR
   \   000016   6033         JZ        ??HalKeyConfig_0
    214            {
    215              /* Rising/Falling edge configuratinn */
    216          
    217              PICTL &= ~(HAL_KEY_SW_6_EDGEBIT);    /* Clear the edge bit */
   \   000018   538CFE       ANL       0x8c,#0xfe
    218              /* For falling edge, the bit must be set. */
    219            #if (HAL_KEY_SW_6_EDGE == HAL_KEY_FALLING_EDGE)
    220              PICTL |= HAL_KEY_SW_6_EDGEBIT;
   \   00001B   438C01       ORL       0x8c,#0x1
    221            #endif
    222          
    223          
    224              /* Interrupt configuration:
    225               * - Enable interrupt generation at the port
    226               * - Enable CPU interrupt
    227               * - Clear any pending interrupt
    228               */
    229              HAL_KEY_SW_6_ICTL |= HAL_KEY_SW_6_ICTLBIT;
   \   00001E   43AB02       ORL       0xab,#0x2
    230              HAL_KEY_SW_6_IEN |= HAL_KEY_SW_6_IENBIT;
   \   000021   D2BD         SETB      0xb8.5
    231              HAL_KEY_SW_6_PXIFG = ~(HAL_KEY_SW_6_BIT);
   \   000023   7589FD       MOV       0x89,#-0x3
    232          
    233          
    234              /* Rising/Falling edge configuratinn */
    235          
    236              PICTL &= ~(HAL_KEY_SW_1_EDGEBIT);    /* Clear the edge bit */
   \   000026   538CF7       ANL       0x8c,#0xf7
    237              /* For falling edge, the bit must be set. */
    238            #if (HAL_KEY_SW_1_EDGE == HAL_KEY_FALLING_EDGE)
    239              PICTL |= HAL_KEY_SW_1_EDGEBIT;
   \   000029   438C08       ORL       0x8c,#0x8
    240            #endif
    241          
    242          
    243              /* Interrupt configuration:
    244               * - Enable interrupt generation at the port
    245               * - Enable CPU interrupt
    246               * - Clear any pending interrupt
    247               */
    248              HAL_KEY_SW_1_ICTL |= HAL_KEY_SW_1_ICTLBIT;
   \   00002C   43AC01       ORL       0xac,#0x1
    249              HAL_KEY_SW_1_IEN |= HAL_KEY_SW_1_IENBIT;
   \   00002F   439A02       ORL       0x9a,#0x2
    250              HAL_KEY_SW_1_PXIFG = ~(HAL_KEY_SW_1_BIT);
   \   000032   758BFE       MOV       0x8b,#-0x2
    251          
    252          
    253              /* Do this only after the hal_key is configured - to work with sleep stuff */
    254              if (HalKeyConfigured == TRUE)
   \   000035   90....       MOV       DPTR,#HalKeyConfigured
   \   000038   E0           MOVX      A,@DPTR
   \   000039   6401         XRL       A,#0x1
   \   00003B   7025         JNZ       ??HalKeyConfig_1
    255              {
    256                osal_stop_timerEx(Hal_TaskID, HAL_KEY_EVENT);  /* Cancel polling if active */
   \   00003D                ; Setup parameters for call to function osal_stop_timerEx
   \   00003D   7A10         MOV       R2,#0x10
   \   00003F   7B00         MOV       R3,#0x0
   \   000041   90....       MOV       DPTR,#Hal_TaskID
   \   000044   E0           MOVX      A,@DPTR
   \   000045   F9           MOV       R1,A
   \   000046   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000049   8017         SJMP      ??HalKeyConfig_1
    257              }
    258            }
    259            else    /* Interrupts NOT enabled */
    260            {
    261              HAL_KEY_SW_6_ICTL &= ~(HAL_KEY_SW_6_ICTLBIT); /* don't generate interrupt */
   \                     ??HalKeyConfig_0:
   \   00004B   53ABFD       ANL       0xab,#0xfd
    262              HAL_KEY_SW_6_IEN &= ~(HAL_KEY_SW_6_IENBIT);   /* Clear interrupt enable bit */
   \   00004E   C2BD         CLR       0xb8.5
    263          
    264              HAL_KEY_SW_1_ICTL &= ~(HAL_KEY_SW_1_ICTLBIT); /* don't generate interrupt */
   \   000050   53ACFE       ANL       0xac,#0xfe
    265              HAL_KEY_SW_1_IEN &= ~(HAL_KEY_SW_1_IENBIT);   /* Clear interrupt enable bit */   
   \   000053   539AFD       ANL       0x9a,#0xfd
    266              
    267              osal_set_event(Hal_TaskID, HAL_KEY_EVENT);
   \   000056                ; Setup parameters for call to function osal_set_event
   \   000056   7A10         MOV       R2,#0x10
   \   000058   7B00         MOV       R3,#0x0
   \   00005A   90....       MOV       DPTR,#Hal_TaskID
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   F9           MOV       R1,A
   \   00005F   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
    268            }
    269          
    270            /* Key now is configured */
    271            HalKeyConfigured = TRUE;
   \                     ??HalKeyConfig_1:
   \   000062   90....       MOV       DPTR,#HalKeyConfigured
   \   000065   7401         MOV       A,#0x1
   \   000067   F0           MOVX      @DPTR,A
    272          }
   \   000068   FF           MOV       R7,A
   \   000069   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   00006C                REQUIRE PICTL
   \   00006C                REQUIRE P0IEN
   \   00006C                REQUIRE _A_IEN1
   \   00006C                REQUIRE P0IFG
   \   00006C                REQUIRE P2IEN
   \   00006C                REQUIRE IEN2
   \   00006C                REQUIRE P2IFG
    273          
    274          
    275          /**************************************************************************************************
    276           * @fn      HalKeyRead
    277           *
    278           * @brief   Read the current value of a key
    279           *
    280           * @param   None
    281           *
    282           * @return  keys - current keys status
    283           **************************************************************************************************/
    284          //uint8 HalKeyRead ( void )
    285          //{
    286          //  uint8 keys = 0;
    287          //
    288          //  if (HAL_PUSH_BUTTON1())
    289          //  {
    290          //    keys |= HAL_KEY_SW_6;
    291          //  }
    292          //
    293          //  if ((HAL_KEY_SW_1_PORT & HAL_KEY_SW_1_BIT))  /* Key is active low */
    294          //  {
    295          //    keys |= HAL_KEY_SW_1;
    296          //  }
    297          //
    298          //  return keys;
    299          //}
    300          
    301          
    302          /**************************************************************************************************
    303           * @fn      HalKeyPoll
    304           *
    305           * @brief   Called by hal_driver to poll the keys
    306           *
    307           * @param   None
    308           *
    309           * @return  None
    310           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    311          void HalKeyPoll (void)
   \                     HalKeyPoll:
    312          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    313            uint8 keys = 0;
   \   000004   7900         MOV       R1,#0x0
    314          
    315            if (!(HAL_KEY_SW_1_PORT & (1 << 0)))  /* Key is active LOW */
   \   000006   A2A0         MOV       C,0xa0.0
   \   000008   4002         JC        ??HalKeyPoll_0
    316            {
    317              keys |= HAL_KEY_SW_1;
   \   00000A   7901         MOV       R1,#0x1
    318            }
    319          
    320            if (!(HAL_KEY_SW_6_PORT & (1 << 1)))  /* Key is active LOW */
   \                     ??HalKeyPoll_0:
   \   00000C   A281         MOV       C,0x80.1
   \   00000E   4004         JC        ??HalKeyPoll_1
    321            {
    322              keys |= HAL_KEY_SW_6;
   \   000010   E9           MOV       A,R1
   \   000011   D2E5         SETB      0xE0 /* A   */.5
   \   000013   F9           MOV       R1,A
    323            }
    324          
    325            /* Invoke Callback if new keys were depressed */
    326            if (pHalKeyProcessFunction
    327          #ifdef HAL_LEGACY_KEYS
    328              && keys //in legacy modes, only report key presses and do not report when a key is released
    329          #endif
    330              )
   \                     ??HalKeyPoll_1:
   \   000014   90....       MOV       DPTR,#pHalKeyProcessFunction
   \   000017   E0           MOVX      A,@DPTR
   \   000018   FA           MOV       R2,A
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   FB           MOV       R3,A
   \   00001C   EA           MOV       A,R2
   \   00001D   4B           ORL       A,R3
   \   00001E   6010         JZ        ??HalKeyPoll_2
    331            {
    332              (pHalKeyProcessFunction) (keys, HAL_KEY_STATE_NORMAL);
   \   000020                ; Setup parameters for indirect call
   \   000020   7A00         MOV       R2,#0x0
   \   000022   90....       MOV       DPTR,#pHalKeyProcessFunction
   \   000025   E0           MOVX      A,@DPTR
   \   000026   F8           MOV       R0,A
   \   000027   A3           INC       DPTR
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F583         MOV       DPH,A
   \   00002B   8882         MOV       DPL,R0
   \   00002D   12....       LCALL     ?CALL_IND
    333            }
    334          }
   \                     ??HalKeyPoll_2:
   \   000030   80..         SJMP      ?Subroutine0
   \   000032                REQUIRE _A_P2
   \   000032                REQUIRE _A_P0
    335          
    336          
    337          /**************************************************************************************************
    338           * @fn      halProcessKeyInterrupt
    339           *
    340           * @brief   Checks to see if it's a valid key interrupt, saves interrupt driven key states for
    341           *          processing by HalKeyRead(), and debounces keys by scheduling HalKeyRead() 25ms later.
    342           *
    343           * @param
    344           *
    345           * @return
    346           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    347          void halProcessKeyInterrupt (void)
   \                     halProcessKeyInterrupt:
    348          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    349            bool valid=FALSE;
   \   000004   7800         MOV       R0,#0x0
    350          
    351            if (HAL_KEY_SW_6_PXIFG & HAL_KEY_SW_6_BIT)  /* Interrupt Flag has been set */
   \   000006   E589         MOV       A,0x89
   \   000008   A2E1         MOV       C,0xE0 /* A   */.1
   \   00000A   5005         JNC       ??halProcessKeyInterrupt_0
    352            {
    353              HAL_KEY_SW_6_PXIFG = ~(HAL_KEY_SW_6_BIT); /* Clear Interrupt Flag */
   \   00000C   7589FD       MOV       0x89,#-0x3
    354              valid = TRUE;
   \   00000F   7801         MOV       R0,#0x1
    355            }
    356          
    357            if (HAL_KEY_SW_1_PXIFG & HAL_KEY_SW_1_BIT)  /* Interrupt Flag has been set */
   \                     ??halProcessKeyInterrupt_0:
   \   000011   E58B         MOV       A,0x8b
   \   000013   A2E0         MOV       C,0xE0 /* A   */.0
   \   000015   5005         JNC       ??halProcessKeyInterrupt_1
    358            {
    359              HAL_KEY_SW_1_PXIFG = ~(HAL_KEY_SW_1_BIT); /* Clear Interrupt Flag */
   \   000017   758BFE       MOV       0x8b,#-0x2
    360              valid = TRUE;
   \   00001A   8005         SJMP      ??halProcessKeyInterrupt_2
    361            }
    362          
    363            if (valid)
   \                     ??halProcessKeyInterrupt_1:
   \   00001C   E8           MOV       A,R0
   \   00001D   A2E0         MOV       C,0xE0 /* A   */.0
   \   00001F   5017         JNC       ??halProcessKeyInterrupt_3
    364            {
    365              osal_start_timerEx (Hal_TaskID, HAL_KEY_EVENT, HAL_KEY_DEBOUNCE_VALUE);
   \                     ??halProcessKeyInterrupt_2:
   \   000021                ; Setup parameters for call to function osal_start_timerEx
   \   000021   90....       MOV       DPTR,#__Constant_19
   \   000024   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000027   7A10         MOV       R2,#0x10
   \   000029   7B00         MOV       R3,#0x0
   \   00002B   90....       MOV       DPTR,#Hal_TaskID
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   F9           MOV       R1,A
   \   000030   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000033   7404         MOV       A,#0x4
   \   000035   12....       LCALL     ?DEALLOC_XSTACK8
    366            }
    367          }
   \                     ??halProcessKeyInterrupt_3:
   \   000038                REQUIRE ?Subroutine0
   \   000038                REQUIRE P0IFG
   \   000038                REQUIRE P2IFG
   \   000038                ; // Fall through to label ?Subroutine0
    368          
    369          /**************************************************************************************************
    370           * @fn      HalKeyEnterSleep
    371           *
    372           * @brief  - Get called to enter sleep mode
    373           *
    374           * @param
    375           *
    376           * @return
    377           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    378          void HalKeyEnterSleep ( void )
   \                     HalKeyEnterSleep:
    379          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    380          }
   \   000000   02....       LJMP      ?BRET
    381          
    382          /**************************************************************************************************
    383           * @fn      HalKeyExitSleep
    384           *
    385           * @brief   - Get called when sleep is over
    386           *
    387           * @param
    388           *
    389           * @return  - return saved keys
    390           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    391          uint8 HalKeyExitSleep ( void )
   \                     HalKeyExitSleep:
    392          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    393            /* Wake up and read keys */
    394            return ( HalKeyRead () );
   \   000004                ; Setup parameters for call to function HalKeyRead
   \   000004   12....       LCALL     `??HalKeyRead::?relay`; Banked call to: HalKeyRead
   \   000007   80..         SJMP      ?Subroutine0
    395          }
    396          
    397          /***************************************************************************************************
    398           *                                    INTERRUPT SERVICE ROUTINE
    399           ***************************************************************************************************/
    400          
    401          /**************************************************************************************************
    402           * @fn      halKeyPort0Isr
    403           *
    404           * @brief   Port0 ISR
    405           *
    406           * @param
    407           *
    408           * @return
    409           **************************************************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    410          HAL_ISR_FUNCTION( halKeyPort0Isr, P0INT_VECTOR )
   \                     halKeyPort0Isr:
    411          {
   \   000000   C0E0         PUSH      A
   \   000002   74F2         MOV       A,#-0xe
   \   000004   12....       LCALL     ?INTERRUPT_ENTER_XSP
   \   000007                ; Saved register size: 14
   \   000007                ; Auto size: 0
    412            HAL_ENTER_ISR();
   \   000007   A2AF         MOV       C,0xa8.7
   \   000009   E4           CLR       A
   \   00000A   33           RLC       A
   \   00000B   FE           MOV       R6,A
   \   00000C   D2AF         SETB      0xa8.7
    413            if (HAL_KEY_SW_6_PXIFG & HAL_KEY_SW_6_BIT)
   \   00000E   E589         MOV       A,0x89
   \   000010   A2E1         MOV       C,0xE0 /* A   */.1
   \   000012   5003         JNC       ??halKeyPort0Isr_0
    414            {
    415              halProcessKeyInterrupt();
   \   000014                ; Setup parameters for call to function halProcessKeyInterrupt
   \   000014   12....       LCALL     `??halProcessKeyInterrupt::?relay`; Banked call to: halProcessKeyInterrupt
    416            }
    417          
    418            /*
    419              Clear the CPU interrupt flag for Port_0
    420              PxIFG has to be cleared before PxIF
    421            */
    422            HAL_KEY_SW_6_PXIFG = 0;
   \                     ??halKeyPort0Isr_0:
   \   000017   758900       MOV       0x89,#0x0
    423            HAL_KEY_CPU_PORT_0_IF = 0;
   \   00001A   C2C5         CLR       0xc0.5
    424            
    425            CLEAR_SLEEP_MODE();
    426            HAL_EXIT_ISR();
   \   00001C                REQUIRE ?Subroutine1
   \   00001C                REQUIRE _A_IEN0
   \   00001C                REQUIRE P0IFG
   \   00001C                REQUIRE _A_IRCON
   \   00001C                ; // Fall through to label ?Subroutine1
    427          }

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   EE           MOV       A,R6
   \   000001   A2E0         MOV       C,0xE0 /* A   */.0
   \   000003   92AF         MOV       0xa8.7,C
   \   000005   7F01         MOV       R7,#0x1
   \   000007   02....       LJMP      ?INTERRUPT_LEAVE_XSP
    428          
    429          
    430          /**************************************************************************************************
    431           * @fn      halKeyPort2Isr
    432           *
    433           * @brief   Port2 ISR
    434           *
    435           * @param
    436           *
    437           * @return
    438           **************************************************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    439          HAL_ISR_FUNCTION( halKeyPort2Isr, P2INT_VECTOR )
   \                     halKeyPort2Isr:
    440          {
   \   000000   C0E0         PUSH      A
   \   000002   74F2         MOV       A,#-0xe
   \   000004   12....       LCALL     ?INTERRUPT_ENTER_XSP
   \   000007                ; Saved register size: 14
   \   000007                ; Auto size: 0
    441            HAL_ENTER_ISR();
   \   000007   A2AF         MOV       C,0xa8.7
   \   000009   E4           CLR       A
   \   00000A   33           RLC       A
   \   00000B   FE           MOV       R6,A
   \   00000C   D2AF         SETB      0xa8.7
    442            if (HAL_KEY_SW_1_PXIFG & HAL_KEY_SW_1_BIT)
   \   00000E   E58B         MOV       A,0x8b
   \   000010   A2E0         MOV       C,0xE0 /* A   */.0
   \   000012   5003         JNC       ??halKeyPort2Isr_0
    443            {
    444              halProcessKeyInterrupt();
   \   000014                ; Setup parameters for call to function halProcessKeyInterrupt
   \   000014   12....       LCALL     `??halProcessKeyInterrupt::?relay`; Banked call to: halProcessKeyInterrupt
    445            }
    446          
    447            /*
    448              Clear the CPU interrupt flag for Port_2
    449              PxIFG has to be cleared before PxIF
    450              Notes: P2_1 and P2_2 are debug lines.
    451            */
    452            HAL_KEY_SW_1_PXIFG = 0;
   \                     ??halKeyPort2Isr_0:
   \   000017   758B00       MOV       0x8b,#0x0
    453            HAL_KEY_CPU_PORT_2_IF = 0;
   \   00001A   C2E8         CLR       0xe8.0
    454          
    455            CLEAR_SLEEP_MODE();
    456            HAL_EXIT_ISR();
   \   00001C   80..         SJMP      ?Subroutine1
   \   00001E                REQUIRE _A_IEN0
   \   00001E                REQUIRE P2IFG
   \   00001E                REQUIRE _A_IRCON2
    457          }

   \                                 In  segment INTVEC, offset 0x33, root
   \                     `??halKeyPort2Isr::??INTVEC 51`:
   \   000033   02....       LJMP       (halKeyPort2Isr)

   \                                 In  segment INTVEC, offset 0x6b, root
   \                     `??halKeyPort0Isr::??INTVEC 107`:
   \   00006B   02....       LJMP       (halKeyPort0Isr)

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_19:
   \   000000   19000000     DD 25
    458          
    459          #else
    460          
    461          
    462          void HalKeyInit(void){}
    463          void HalKeyConfig(bool interruptEnable, halKeyCBack_t cback){}
    464          uint8 HalKeyRead(void){ return 0;}
    465          void HalKeyPoll(void){}
    466          
    467          #endif /* HAL_KEY */
    468          
    469          
    470          
    471          
    472          
    473          /**************************************************************************************************
    474          **************************************************************************************************/
    475          
    476          
    477          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      9   HalKeyConfig
        0      9   -> osal_set_event
        0      9   -> osal_stop_timerEx
      0      0   HalKeyEnterSleep
      2      0   HalKeyExitSleep
        2      0   -> HalKeyRead
      2      0   HalKeyInit
      2      0   HalKeyPoll
      0     14   halKeyPort0Isr
        0     14   -> halProcessKeyInterrupt
      0     14   halKeyPort2Isr
        0     14   -> halProcessKeyInterrupt
      2     18   halProcessKeyInterrupt
        2      4   -> osal_start_timerEx


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ?Subroutine0
      10  ?Subroutine1
     108  HalKeyConfig
       1  HalKeyConfigured
       3  HalKeyEnterSleep
       9  HalKeyExitSleep
      30  HalKeyInit
      50  HalKeyPoll
       1  Hal_KeyIntEnable
       1  IEN2
       1  P0DIR
       1  P0IEN
       1  P0IFG
       1  P0SEL
       1  P2DIR
       1  P2IEN
       1  P2IFG
       1  P2SEL
       1  PICTL
       1  _A_IEN0
       1  _A_IEN1
       1  _A_IRCON
       1  _A_IRCON2
       1  _A_P0
       1  _A_P2
       4  __Constant_19
      28  halKeyPort0Isr
       3  halKeyPort0Isr::??INTVEC 107
      30  halKeyPort2Isr
       3  halKeyPort2Isr::??INTVEC 51
      56  halProcessKeyInterrupt
       2  pHalKeyProcessFunction
      36  -- Other

 
 263 bytes in segment BANKED_CODE
  36 bytes in segment BANK_RELAYS
   6 bytes in segment INTVEC
  68 bytes in segment NEAR_CODE
  16 bytes in segment SFR_AN
   4 bytes in segment XDATA_ROM_C
   4 bytes in segment XDATA_Z
 
 104 bytes of CODE     memory (+  6 bytes shared)
   0 bytes of CONST    memory (+  4 bytes shared)
   0 bytes of DATA     memory (+ 16 bytes shared)
 263 bytes of HUGECODE memory
   4 bytes of XDATA    memory

Errors: none
Warnings: none
