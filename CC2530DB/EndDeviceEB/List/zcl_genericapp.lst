###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               10/Dec/2023  14:04:57
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\4-Switch-PowerSaving-firmware\Source\zcl_genericapp.c
#    Command line       =  
#        -f C:\Users\Flemming\AppData\Local\Temp\EW5757.tmp ("C:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\4-Switch-PowerSaving-firmware\Source\zcl_genericapp.c"
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
#        POWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC
#        -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
#        xLEGACY_LCD_DEBUG -D xLCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE
#        -D ZCL_READ -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D xZCL_SCENES
#        -D xZCL_GROUPS -D ZCL_ON_OFF -D xZCL_DISCOVER -D ZCL_REPORTING_DEVICE
#        -D ISR_KEYINTERRUPT -D HAL_LCD=FALSE -D HAL_UARTE=FALSE -D
#        HAL_SPI=FALSE -D HAL_HID=FALSE -lC "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\4-Switch-PowerSaving-firmware\CC2530DB\EndDeviceEB\List"
#        -lA "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\4-Switch-PowerSaving-firmware\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\4-Switch-PowerSaving-firmware\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "C:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\4-Switch-PowerSaving-firmware\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "C:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\4-Switch-PowerSaving-firmware\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\4-Switch-PowerSaving-firmware\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\4-Switch-PowerSaving-firmware\CC2530DB\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\4-Switch-PowerSaving-firmware\CC2530DB\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\4-Switch-PowerSaving-firmware\CC2530DB\..\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\4-Switch-PowerSaving-firmware\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\4-Switch-PowerSaving-firmware\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\4-Switch-PowerSaving-firmware\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\4-Switch-PowerSaving-firmware\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\4-Switch-PowerSaving-firmware\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\4-Switch-PowerSaving-firmware\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\4-Switch-PowerSaving-firmware\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\4-Switch-PowerSaving-firmware\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\4-Switch-PowerSaving-firmware\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\4-Switch-PowerSaving-firmware\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\4-Switch-PowerSaving-firmware\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\4-Switch-PowerSaving-firmware\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\4-Switch-PowerSaving-firmware\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\4-Switch-PowerSaving-firmware\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\4-Switch-PowerSaving-firmware\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\4-Switch-PowerSaving-firmware\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\4-Switch-PowerSaving-firmware\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\4-Switch-PowerSaving-firmware\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\4-Switch-PowerSaving-firmware\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\4-Switch-PowerSaving-firmware\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\4-Switch-PowerSaving-firmware\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\4-Switch-PowerSaving-firmware\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  Danish_DNK.1252
#    List file          =  
#        C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\4-Switch-PowerSaving-firmware\CC2530DB\EndDeviceEB\List\zcl_genericapp.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\4-Switch-PowerSaving-firmware\CC2530DB\EndDeviceEB\Obj\zcl_genericapp.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack 3.0.2\Projects\zstack\HomeAutomation\4-Switch-PowerSaving-firmware\Source\zcl_genericapp.c
      1          /**************************************************************************************************
      2            Filename:       zcl_genericapp.c
      3            Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
      4            Revision:       $Revision: 40796 $
      5          
      6          
      7            Description:    Zigbee Cluster Library - sample device application.
      8          
      9          
     10            Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42            This application is a template to get started writing an application
     43            from scratch.
     44          
     45            Look for the sections marked with "GENERICAPP_TODO" to add application
     46            specific code.
     47          
     48            Note: if you would like your application to support automatic attribute
     49            reporting, include the BDB_REPORTING compile flag.
     50          *********************************************************************/
     51          
     52          /*********************************************************************
     53           * INCLUDES
     54           */
     55          #include "ZComDef.h"
     56          #include "OSAL.h"
     57          #include "AF.h"
     58          #include "ZDApp.h"
     59          #include "ZDObject.h"
     60          #include "MT_SYS.h"
     61          
     62          #include "nwk_util.h"
     63          
     64          #include "zcl.h"
     65          #include "zcl_general.h"
     66          #include "zcl_ha.h"
     67          #include "zcl_diagnostic.h"
     68          #include "zcl_genericapp.h"
     69          
     70          #include "bdb.h"
     71          #include "bdb_interface.h"
     72          #include "gp_interface.h"
     73          
     74          #if defined ( INTER_PAN )
     75          #if defined ( BDB_TL_INITIATOR )
     76            #include "bdb_touchlink_initiator.h"
     77          #endif // BDB_TL_INITIATOR
     78          #if defined ( BDB_TL_TARGET )
     79            #include "bdb_touchlink_target.h"
     80          #endif // BDB_TL_TARGET
     81          #endif // INTER_PAN
     82          
     83          #if defined ( BDB_TL_INITIATOR ) || defined ( BDB_TL_TARGET )
     84            #include "bdb_touchlink.h"
     85          #endif
     86          
     87          #include "onboard.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa0
   \   union <unnamed> volatile __sfr _A_P2
   \                     _A_P2:
   \   000000                DS 1
     88          
     89          /* HAL */
     90          #include "hal_lcd.h"
     91          #include "hal_led.h" 
     92          #include "hal_key.h"
     93          
     94          /* SW_1 is at P2.0 */
     95          #define HAL_KEY_SW_1_PORT   P2
     96          #define HAL_KEY_SW_1_BIT    BV(0)
     97          
     98          #include "battery_reporting.h"
     99          //#include <stdio.h>
    100          
    101          
    102          /*********************************************************************
    103           * MACROS
    104           */
    105          
    106          
    107          /*********************************************************************
    108           * CONSTANTS
    109           */
    110          
    111          /*********************************************************************
    112           * TYPEDEFS
    113           */
    114          
    115          /*********************************************************************
    116           * GLOBAL VARIABLES
    117           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    118          byte zclGenericApp_TaskID;
   \                     zclGenericApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    119          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    120          uint8 zclGenericApp_OnOffSwitchType = ON_OFF_SWITCH_TYPE_MOMENTARY;
   \                     zclGenericApp_OnOffSwitchType:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclGenericApp_OnOffSwitchTyp`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    121          uint8 zclGenericApp_OnOffSwitchActions;
   \                     zclGenericApp_OnOffSwitchActions:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    122          
    123          
    124          /*********************************************************************
    125           * GLOBAL FUNCTIONS
    126           */
    127          void zclGenericApp_reset(void); 
    128          /*********************************************************************
    129           * LOCAL VARIABLES
    130           */
    131          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    132          bool isToggleSet6 = false;
   \                     isToggleSet6:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133          bool isToggleSet5 = false;
   \                     isToggleSet5:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    134          bool isToggleSet4 = false;
   \                     isToggleSet4:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    135          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          uint8 giGenAppScreenMode = GENERIC_MAINMODE;   // display the main screen mode first
   \                     giGenAppScreenMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    137          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          uint8 gPermitDuration = 0;    // permit joining default to disabled
   \                     gPermitDuration:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    139          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    140          devStates_t zclGenericApp_NwkState = DEV_INIT;
   \                     zclGenericApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclGenericApp_NwkState>`
   \   000001                REQUIRE __INIT_XDATA_I
    141          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          afAddrType_t zclGenericApp_DstAddr;
   \                     zclGenericApp_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          afAddrType_t zclGenericApp_DstAddr2;
   \                     zclGenericApp_DstAddr2:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          afAddrType_t zclGenericApp_DstAddr3;
   \                     zclGenericApp_DstAddr3:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    145          
    146          // Endpoint to allow SYS_APP_MSGs

   \                                 In  segment XDATA_I, align 1, keep-with-next
    147          static endPointDesc_t sampleSw_TestEp =
   \                     sampleSw_TestEp:
   \   000000                DS 7
   \   000007                REQUIRE `?<Initializer for sampleSw_TestEp>`
   \   000007                REQUIRE __INIT_XDATA_I
    148          {
    149            GENERICAPP_ENDPOINT,                  // endpoint
    150            0,
    151            &zclGenericApp_TaskID,
    152            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
    153            (afNetworkLatencyReq_t)0            // No Network Latency req
    154          };

   \                                 In  segment XDATA_I, align 1, keep-with-next
    155          static endPointDesc_t sampleSw_TestEp2 =
   \                     sampleSw_TestEp2:
   \   000000                DS 7
   \   000007                REQUIRE `?<Initializer for sampleSw_TestEp2>`
   \   000007                REQUIRE __INIT_XDATA_I
    156          {
    157            GENERICAPP_ENDPOINT2,                  // endpoint
    158            0,
    159            &zclGenericApp_TaskID,
    160            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
    161            (afNetworkLatencyReq_t)0            // No Network Latency req
    162          };

   \                                 In  segment XDATA_I, align 1, keep-with-next
    163          static endPointDesc_t sampleSw_TestEp3 =
   \                     sampleSw_TestEp3:
   \   000000                DS 7
   \   000007                REQUIRE `?<Initializer for sampleSw_TestEp3>`
   \   000007                REQUIRE __INIT_XDATA_I
    164          {
    165            GENERICAPP_ENDPOINT3,                  // endpoint
    166            0,
    167            &zclGenericApp_TaskID,
    168            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
    169            (afNetworkLatencyReq_t)0            // No Network Latency req
    170          };
    171          
    172          
    173          /*********************************************************************
    174           * LOCAL FUNCTIONS
    175           */
    176          static void zclGenericApp_HandleKeys( byte shift, byte keys );
    177          static void zclGenericApp_BasicResetCB( void );
    178          static void zclGenericApp_ProcessIdentifyTimeChange( uint8 endpoint );
    179          static void zclGenericApp_BindNotification( bdbBindNotificationData_t *data );
    180          #if ( defined ( BDB_TL_TARGET ) && (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE) )
    181          static void zclGenericApp_ProcessTouchlinkTargetEnable( uint8 enable );
    182          #endif
    183          
    184          static void zclGenericApp_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg);
    185          
    186          // app display functions
    187          //static void zclGenericApp_LcdDisplayUpdate( void );
    188          #ifdef LCD_SUPPORTED
    189          static void zclGenericApp_LcdDisplayMainMode( void );
    190          static void zclGenericApp_LcdDisplayHelpMode( void );
    191          #endif
    192          
    193          // Functions to process ZCL Foundation incoming Command/Response messages
    194          static void zclGenericApp_ProcessIncomingMsg( zclIncomingMsg_t *msg );
    195          #ifdef ZCL_READ
    196          static uint8 zclGenericApp_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
    197          #endif
    198          #ifdef ZCL_WRITE
    199          static uint8 zclGenericApp_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
    200          #endif
    201          static uint8 zclGenericApp_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
    202          #ifdef ZCL_DISCOVER
    203          static uint8 zclGenericApp_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
    204          static uint8 zclGenericApp_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
    205          static uint8 zclGenericApp_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
    206          #endif
    207          
    208          static void zclSampleApp_BatteryWarningCB( uint8 voltLevel);
    209          
    210          /*********************************************************************
    211           * STATUS STRINGS
    212           */
    213          #ifdef LCD_SUPPORTED
    214          const char sDeviceName[]   = "  Generic App";
    215          const char sClearLine[]    = " ";
    216          const char sSwGenericApp[]      = "SW1:GENAPP_TODO";  // GENERICAPP_TODO
    217          const char sSwBDBMode[]     = "SW2: Start BDB";
    218          char sSwHelp[]             = "SW4: Help       ";  // last character is * if NWK open
    219          #endif
    220          
    221          /*********************************************************************
    222           * ZCL General Profile Callback table
    223           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    224          static zclGeneral_AppCallbacks_t zclGenericApp_CmdCallbacks =
   \                     zclGenericApp_CmdCallbacks:
   \   000000                DS 16
   \   000010                REQUIRE `?<Initializer for zclGenericApp_CmdCallbacks>`
   \   000010                REQUIRE __INIT_XDATA_I
    225          {
    226            zclGenericApp_BasicResetCB,             // Basic Cluster Reset command
    227            NULL,                                   // Identify Trigger Effect command
    228            NULL,                                   // On/Off cluster commands
    229            NULL,                                   // On/Off cluster enhanced command Off with Effect
    230            NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
    231            NULL,                                   // On/Off cluster enhanced command On with Timed Off
    232          #ifdef ZCL_LEVEL_CTRL
    233            NULL,                                   // Level Control Move to Level command
    234            NULL,                                   // Level Control Move command
    235            NULL,                                   // Level Control Step command
    236            NULL,                                   // Level Control Stop command
    237          #endif
    238          #ifdef ZCL_GROUPS
    239            NULL,                                   // Group Response commands
    240          #endif
    241          #ifdef ZCL_SCENES
    242            NULL,                                  // Scene Store Request command
    243            NULL,                                  // Scene Recall Request command
    244            NULL,                                  // Scene Response command
    245          #endif
    246          #ifdef ZCL_ALARMS
    247            NULL,                                  // Alarm (Response) commands
    248          #endif
    249          #ifdef SE_UK_EXT
    250            NULL,                                  // Get Event Log command
    251            NULL,                                  // Publish Event Log command
    252          #endif
    253            NULL,                                  // RSSI Location command
    254            NULL                                   // RSSI Location Response command
    255          };
    256          
    257          /*********************************************************************
    258           * GENERICAPP_TODO: Add other callback structures for any additional application specific 
    259           *       Clusters being used, see available callback structures below.
    260           *
    261           *       bdbTL_AppCallbacks_t 
    262           *       zclApplianceControl_AppCallbacks_t 
    263           *       zclApplianceEventsAlerts_AppCallbacks_t 
    264           *       zclApplianceStatistics_AppCallbacks_t 
    265           *       zclElectricalMeasurement_AppCallbacks_t 
    266           *       zclGeneral_AppCallbacks_t 
    267           *       zclGp_AppCallbacks_t 
    268           *       zclHVAC_AppCallbacks_t 
    269           *       zclLighting_AppCallbacks_t 
    270           *       zclMS_AppCallbacks_t 
    271           *       zclPollControl_AppCallbacks_t 
    272           *       zclPowerProfile_AppCallbacks_t 
    273           *       zclSS_AppCallbacks_t  
    274           *
    275           */
    276          
    277          /*********************************************************************
    278           * @fn          zclGenericApp_Init
    279           *
    280           * @brief       Initialization function for the zclGeneral layer.
    281           *
    282           * @param       none
    283           *
    284           * @return      none
    285           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    286          void zclGenericApp_Init( byte task_id )
   \                     zclGenericApp_Init:
    287          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    288            zclGenericApp_TaskID = task_id;
   \   000006   90....       MOV       DPTR,#zclGenericApp_TaskID
   \   000009   F0           MOVX      @DPTR,A
    289            
    290              // Set destination address to indirect
    291            zclGenericApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   00000A   90....       MOV       DPTR,#zclGenericApp_DstAddr + 8
   \   00000D   7402         MOV       A,#0x2
   \   00000F   F0           MOVX      @DPTR,A
    292            zclGenericApp_DstAddr.endPoint = GENERICAPP_ENDPOINT;
   \   000010   A3           INC       DPTR
   \   000011   14           DEC       A
   \   000012   F0           MOVX      @DPTR,A
    293            zclGenericApp_DstAddr.addr.shortAddr = 0x0000;
   \   000013   90....       MOV       DPTR,#zclGenericApp_DstAddr
   \   000016   E4           CLR       A
   \   000017   F0           MOVX      @DPTR,A
   \   000018   A3           INC       DPTR
   \   000019   F0           MOVX      @DPTR,A
    294          
    295            zclGenericApp_DstAddr2.addrMode = (afAddrMode_t)Addr16Bit;
   \   00001A   90....       MOV       DPTR,#zclGenericApp_DstAddr2 + 8
   \   00001D   7402         MOV       A,#0x2
   \   00001F   F0           MOVX      @DPTR,A
    296            zclGenericApp_DstAddr2.endPoint = GENERICAPP_ENDPOINT2;
   \   000020   A3           INC       DPTR
   \   000021   F0           MOVX      @DPTR,A
    297            zclGenericApp_DstAddr2.addr.shortAddr = 0x0000;  
   \   000022   90....       MOV       DPTR,#zclGenericApp_DstAddr2
   \   000025   E4           CLR       A
   \   000026   F0           MOVX      @DPTR,A
   \   000027   A3           INC       DPTR
   \   000028   F0           MOVX      @DPTR,A
    298            
    299            zclGenericApp_DstAddr3.addrMode = (afAddrMode_t)Addr16Bit;
   \   000029   90....       MOV       DPTR,#zclGenericApp_DstAddr3 + 8
   \   00002C   7402         MOV       A,#0x2
   \   00002E   F0           MOVX      @DPTR,A
    300            zclGenericApp_DstAddr3.endPoint = GENERICAPP_ENDPOINT3;
   \   00002F   A3           INC       DPTR
   \   000030   04           INC       A
   \   000031   F0           MOVX      @DPTR,A
    301            zclGenericApp_DstAddr3.addr.shortAddr = 0x0000;
   \   000032   90....       MOV       DPTR,#zclGenericApp_DstAddr3
   \   000035   E4           CLR       A
   \   000036   F0           MOVX      @DPTR,A
   \   000037   A3           INC       DPTR
   \   000038   F0           MOVX      @DPTR,A
    302          
    303            
    304            // This app is part of the Home Automation Profile
    305            bdb_RegisterSimpleDescriptor( &zclGenericApp_SimpleDesc );
   \   000039                ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
   \   000039   7A..         MOV       R2,#zclGenericApp_SimpleDesc & 0xff
   \   00003B   7B..         MOV       R3,#(zclGenericApp_SimpleDesc >> 8) & 0xff
   \   00003D   12....       LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
    306            bdb_RegisterSimpleDescriptor( &zclGenericApp_SimpleDesc2 );
   \   000040                ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
   \   000040   7A..         MOV       R2,#zclGenericApp_SimpleDesc2 & 0xff
   \   000042   7B..         MOV       R3,#(zclGenericApp_SimpleDesc2 >> 8) & 0xff
   \   000044   12....       LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
    307            bdb_RegisterSimpleDescriptor( &zclGenericApp_SimpleDesc3 );  
   \   000047                ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
   \   000047   7A..         MOV       R2,#zclGenericApp_SimpleDesc3 & 0xff
   \   000049   7B..         MOV       R3,#(zclGenericApp_SimpleDesc3 >> 8) & 0xff
   \   00004B   12....       LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
    308            
    309            // Register the ZCL General Cluster Library callback functions
    310            zclGeneral_RegisterCmdCallbacks( GENERICAPP_ENDPOINT, &zclGenericApp_CmdCallbacks );
   \   00004E                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   00004E   7A..         MOV       R2,#zclGenericApp_CmdCallbacks & 0xff
   \   000050   7B..         MOV       R3,#(zclGenericApp_CmdCallbacks >> 8) & 0xff
   \   000052   7901         MOV       R1,#0x1
   \   000054   12....       LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
    311            zclGeneral_RegisterCmdCallbacks( GENERICAPP_ENDPOINT2, &zclGenericApp_CmdCallbacks );
   \   000057                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   000057   7A..         MOV       R2,#zclGenericApp_CmdCallbacks & 0xff
   \   000059   7B..         MOV       R3,#(zclGenericApp_CmdCallbacks >> 8) & 0xff
   \   00005B   7902         MOV       R1,#0x2
   \   00005D   12....       LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
    312            zclGeneral_RegisterCmdCallbacks( GENERICAPP_ENDPOINT3, &zclGenericApp_CmdCallbacks );
   \   000060                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   000060   7A..         MOV       R2,#zclGenericApp_CmdCallbacks & 0xff
   \   000062   7B..         MOV       R3,#(zclGenericApp_CmdCallbacks >> 8) & 0xff
   \   000064   7903         MOV       R1,#0x3
   \   000066   12....       LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
    313            
    314            // GENERICAPP_TODO: Register other cluster command callbacks here
    315          
    316            // Register the application's attribute list
    317            zcl_registerAttrList( GENERICAPP_ENDPOINT, zclGenericApp_NumAttributes, zclGenericApp_Attrs );
   \   000069                ; Setup parameters for call to function zcl_registerAttrList
   \   000069   7C..         MOV       R4,#zclGenericApp_Attrs & 0xff
   \   00006B   7D..         MOV       R5,#(zclGenericApp_Attrs >> 8) & 0xff
   \   00006D   90....       MOV       DPTR,#zclGenericApp_NumAttributes
   \   000070   E4           CLR       A
   \   000071   93           MOVC      A,@A+DPTR
   \   000072   FA           MOV       R2,A
   \   000073   7901         MOV       R1,#0x1
   \   000075   12....       LCALL     ?Subroutine2 & 0xFFFF
    318            zcl_registerAttrList( GENERICAPP_ENDPOINT2, zclGenericApp_NumAttributes, zclGenericApp_Attrs );
   \                     ??CrossCallReturnLabel_6:
   \   000078   7902         MOV       R1,#0x2
   \   00007A   12....       LCALL     ?Subroutine2 & 0xFFFF
    319            zcl_registerAttrList( GENERICAPP_ENDPOINT3, zclGenericApp_NumAttributes, zclGenericApp_Attrs );  
   \                     ??CrossCallReturnLabel_7:
   \   00007D   7903         MOV       R1,#0x3
   \   00007F   12....       LCALL     `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
    320            
    321            // Register the Application to receive the unprocessed Foundation command/response messages
    322            zcl_registerForMsg( zclGenericApp_TaskID );
   \   000082                ; Setup parameters for call to function zcl_registerForMsg
   \   000082   90....       MOV       DPTR,#zclGenericApp_TaskID
   \   000085   E0           MOVX      A,@DPTR
   \   000086   F9           MOV       R1,A
   \   000087   12....       LCALL     `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
    323          
    324          #ifdef ZCL_DISCOVER
    325            // Register the application's command list
    326            zcl_registerCmdList( GENERICAPP_ENDPOINT, zclCmdsArraySize, zclGenericApp_Cmds );
    327            zcl_registerCmdList( GENERICAPP_ENDPOINT2, zclCmdsArraySize, zclGenericApp_Cmds );
    328            zcl_registerCmdList( GENERICAPP_ENDPOINT3, zclCmdsArraySize, zclGenericApp_Cmds );
    329          #endif
    330          
    331            // Register low voltage NV memory protection application callback
    332            RegisterVoltageWarningCB( zclSampleApp_BatteryWarningCB );
   \   00008A                ; Setup parameters for call to function RegisterVoltageWarningCB
   \   00008A   7A..         MOV       R2,#`??zclSampleApp_BatteryWarningCB::?relay` & 0xff
   \   00008C   7B..         MOV       R3,#(`??zclSampleApp_BatteryWarningCB::?relay` >> 8) & 0xff
   \   00008E   12....       LCALL     `??RegisterVoltageWarningCB::?relay`; Banked call to: RegisterVoltageWarningCB
    333          
    334            // Register for all key events - This app will handle all key events
    335            RegisterForKeys( zclGenericApp_TaskID );
   \   000091                ; Setup parameters for call to function RegisterForKeys
   \   000091   90....       MOV       DPTR,#zclGenericApp_TaskID
   \   000094   E0           MOVX      A,@DPTR
   \   000095   F9           MOV       R1,A
   \   000096   12....       LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    336            
    337            // Register for a test endpoint
    338            afRegister( &sampleSw_TestEp );
   \   000099                ; Setup parameters for call to function afRegister
   \   000099   7A..         MOV       R2,#sampleSw_TestEp & 0xff
   \   00009B   7B..         MOV       R3,#(sampleSw_TestEp >> 8) & 0xff
   \   00009D   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    339            afRegister( &sampleSw_TestEp2 );
   \   0000A0                ; Setup parameters for call to function afRegister
   \   0000A0   7A..         MOV       R2,#sampleSw_TestEp2 & 0xff
   \   0000A2   7B..         MOV       R3,#(sampleSw_TestEp2 >> 8) & 0xff
   \   0000A4   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    340            afRegister( &sampleSw_TestEp3 );
   \   0000A7                ; Setup parameters for call to function afRegister
   \   0000A7   7A..         MOV       R2,#sampleSw_TestEp3 & 0xff
   \   0000A9   7B..         MOV       R3,#(sampleSw_TestEp3 >> 8) & 0xff
   \   0000AB   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    341          
    342            bdb_RegisterCommissioningStatusCB( zclGenericApp_ProcessCommissioningStatus );
   \   0000AE                ; Setup parameters for call to function bdb_RegisterCommissioningStatusCB
   \   0000AE   7A..         MOV       R2,#`??zclGenericApp_ProcessCommissioningStatus::?re` & 0xff
   \   0000B0   7B..         MOV       R3,#(`??zclGenericApp_ProcessCommissioningStatus::?re` >> 8) & 0xff
   \   0000B2   12....       LCALL     `??bdb_RegisterCommissioningStatusCB::?relay`; Banked call to: bdb_RegisterCommissioningStatusCB
    343            bdb_RegisterIdentifyTimeChangeCB( zclGenericApp_ProcessIdentifyTimeChange );
   \   0000B5                ; Setup parameters for call to function bdb_RegisterIdentifyTimeChangeCB
   \   0000B5   7A..         MOV       R2,#`??zclGenericApp_ProcessIdentifyTimeChange::?rel` & 0xff
   \   0000B7   7B..         MOV       R3,#(`??zclGenericApp_ProcessIdentifyTimeChange::?rel` >> 8) & 0xff
   \   0000B9   12....       LCALL     `??bdb_RegisterIdentifyTimeChangeCB::?relay`; Banked call to: bdb_RegisterIdentifyTimeChangeCB
    344            bdb_RegisterBindNotificationCB( zclGenericApp_BindNotification );
   \   0000BC                ; Setup parameters for call to function bdb_RegisterBindNotificationCB
   \   0000BC   7A..         MOV       R2,#`??zclGenericApp_BindNotification::?relay` & 0xff
   \   0000BE   7B..         MOV       R3,#(`??zclGenericApp_BindNotification::?relay` >> 8) & 0xff
   \   0000C0   12....       LCALL     `??bdb_RegisterBindNotificationCB::?relay`; Banked call to: bdb_RegisterBindNotificationCB
    345          
    346          #if ( defined ( BDB_TL_TARGET ) && (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE) )
    347            bdb_RegisterTouchlinkTargetEnableCB( zclGenericApp_ProcessTouchlinkTargetEnable );
    348          #endif
    349          
    350          #ifdef ZCL_DIAGNOSTIC
    351            // Register the application's callback function to read/write attribute data.
    352            // This is only required when the attribute data format is unknown to ZCL.
    353            zcl_registerReadWriteCB( GENERICAPP_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
    354            zcl_registerReadWriteCB( GENERICAPP_ENDPOINT2, zclDiagnostic_ReadWriteAttrCB, NULL );
    355            zcl_registerReadWriteCB( GENERICAPP_ENDPOINT3, zclDiagnostic_ReadWriteAttrCB, NULL );
    356          
    357            if ( zclDiagnostic_InitStats() == ZSuccess )
    358            {
    359              // Here the user could start the timer to save Diagnostics to NV
    360            }
    361          #endif
    362          
    363          
    364          #ifdef LCD_SUPPORTED
    365            HalLcdWriteString ( (char *)sDeviceName, HAL_LCD_LINE_3 );
    366          #endif  // LCD_SUPPORTED
    367          
    368          bdb_StartCommissioning(BDB_COMMISSIONING_REJOIN_EXISTING_NETWORK_ON_STARTUP);
   \   0000C3                ; Setup parameters for call to function bdb_StartCommissioning
   \   0000C3   7900         MOV       R1,#0x0
   \   0000C5   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
    369          }
   \   0000C8   7F01         MOV       R7,#0x1
   \   0000CA   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
   \   000003                ; Setup parameters for call to function zcl_registerAttrList
   \   000003                ; Setup parameters for call to function zcl_registerAttrList
   \   000003   7C..         MOV       R4,#zclGenericApp_Attrs & 0xff
   \   000005   7D..         MOV       R5,#(zclGenericApp_Attrs >> 8) & 0xff
   \   000007   90....       MOV       DPTR,#zclGenericApp_NumAttributes
   \   00000A   E4           CLR       A
   \   00000B   93           MOVC      A,@A+DPTR
   \   00000C   FA           MOV       R2,A
   \   00000D   22           RET
    370          
    371          /*********************************************************************
    372           * @fn          zclSample_event_loop
    373           *
    374           * @brief       Event Loop Processor for zclGeneral.
    375           *
    376           * @param       none
    377           *
    378           * @return      none
    379           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    380          uint16 zclGenericApp_event_loop( uint8 task_id, uint16 events )
   \                     zclGenericApp_event_loop:
    381          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    382            afIncomingMSGPacket_t *MSGpkt;
    383          
    384            (void)task_id;  // Intentionally unreferenced parameter
    385          
    386            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL       A,#0x80
   \   00000B   7033         JNZ       ??zclGenericApp_event_loop_0
    387            {
    388              while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclGenericApp_TaskID )) )
    389              {
    390                switch ( MSGpkt->hdr.event )
    391                {
    392                  case ZCL_INCOMING_MSG:
    393                    // Incoming ZCL Foundation command/response messages
    394                    zclGenericApp_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
    395                    break;
    396          
    397                  case KEY_CHANGE:
    398                    zclGenericApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    399                    break;
    400          
    401                  case ZDO_STATE_CHANGE:
    402                    zclGenericApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
    403          
    404                    // now on the network
    405                    if ( (zclGenericApp_NwkState == DEV_ZB_COORD) ||
    406                         (zclGenericApp_NwkState == DEV_ROUTER)   ||
    407                         (zclGenericApp_NwkState == DEV_END_DEVICE) )
    408                    {
    409                      giGenAppScreenMode = GENERIC_MAINMODE;
    410                    }
    411                    break;
    412          
    413                  default:
    414                    break;
    415                }
    416          
    417                // Release the memory
    418                osal_msg_deallocate( (uint8 *)MSGpkt );
    419              }
    420          
    421              // return unprocessed events
    422              return (events ^ SYS_EVENT_MSG);
    423            }
    424          
    425            if ( events & GENERICAPP_MAIN_SCREEN_EVT )
   \   00000D   EA           MOV       A,R2
   \   00000E   A2E0         MOV       C,0xE0 /* A   */.0
   \   000010   4003         JC        $+5
   \   000012   02....       LJMP      ??zclGenericApp_event_loop_1 & 0xFFFF
    426            {
    427              giGenAppScreenMode = GENERIC_MAINMODE;
   \   000015   90....       MOV       DPTR,#giGenAppScreenMode
   \   000018   E4           CLR       A
   \   000019   F0           MOVX      @DPTR,A
    428          
    429              return ( events ^ GENERICAPP_MAIN_SCREEN_EVT );
   \   00001A   EA           MOV       A,R2
   \   00001B   6401         XRL       A,#0x1
   \   00001D   02....       LJMP      ??zclGenericApp_event_loop_2 & 0xFFFF
    430            }
   \                     ??zclGenericApp_event_loop_3:
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   90....       MOV       DPTR,#zclGenericApp_NwkState
   \   000025   F0           MOVX      @DPTR,A
   \   000026   6409         XRL       A,#0x9
   \   000028   600A         JZ        ??zclGenericApp_event_loop_4
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   6407         XRL       A,#0x7
   \   00002D   6005         JZ        ??zclGenericApp_event_loop_4
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   6406         XRL       A,#0x6
   \   000032   7005         JNZ       ??zclGenericApp_event_loop_5
   \                     ??zclGenericApp_event_loop_4:
   \   000034   90....       MOV       DPTR,#giGenAppScreenMode
   \   000037   E4           CLR       A
   \   000038   F0           MOVX      @DPTR,A
   \                     ??zclGenericApp_event_loop_5:
   \   000039                ; Setup parameters for call to function osal_msg_deallocate
   \   000039   AA..         MOV       R2,?V0
   \   00003B   AB..         MOV       R3,?V1
   \   00003D   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??zclGenericApp_event_loop_0:
   \   000040                ; Setup parameters for call to function osal_msg_receive
   \   000040   90....       MOV       DPTR,#zclGenericApp_TaskID
   \   000043   E0           MOVX      A,@DPTR
   \   000044   F9           MOV       R1,A
   \   000045   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000048   8A..         MOV       ?V0,R2
   \   00004A   8B..         MOV       ?V1,R3
   \   00004C   EA           MOV       A,R2
   \   00004D   4B           ORL       A,R3
   \   00004E   606E         JZ        ??zclGenericApp_event_loop_6
   \   000050   8A82         MOV       DPL,R2
   \   000052   8B83         MOV       DPH,R3
   \   000054   E0           MOVX      A,@DPTR
   \   000055   24CC         ADD       A,#-0x34
   \   000057   600A         JZ        ??zclGenericApp_event_loop_7
   \   000059   2474         ADD       A,#0x74
   \   00005B   604D         JZ        ??zclGenericApp_event_loop_8
   \   00005D   24EF         ADD       A,#-0x11
   \   00005F   60BF         JZ        ??zclGenericApp_event_loop_3
   \   000061   80D6         SJMP      ??zclGenericApp_event_loop_5
   \                     ??zclGenericApp_event_loop_7:
   \   000063   EA           MOV       A,R2
   \   000064   2417         ADD       A,#0x17
   \   000066   F8           MOV       R0,A
   \   000067   E4           CLR       A
   \   000068   35..         ADDC      A,?V1
   \   00006A   F9           MOV       R1,A
   \   00006B   E8           MOV       A,R0
   \   00006C   FA           MOV       R2,A
   \   00006D   E9           MOV       A,R1
   \   00006E   FB           MOV       R3,A
   \   00006F   A3           INC       DPTR
   \   000070   A3           INC       DPTR
   \   000071   A3           INC       DPTR
   \   000072   A3           INC       DPTR
   \   000073   A3           INC       DPTR
   \   000074   A3           INC       DPTR
   \   000075   A3           INC       DPTR
   \   000076   E0           MOVX      A,@DPTR
   \   000077   14           DEC       A
   \   000078   6011         JZ        ??zclGenericApp_event_loop_9
   \   00007A   24FD         ADD       A,#-0x3
   \   00007C   701A         JNZ       ??zclGenericApp_event_loop_10
   \   00007E   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000081   E0           MOVX      A,@DPTR
   \   000082   F9           MOV       R1,A
   \   000083   E8           MOV       A,R0
   \   000084   C3           CLR       C
   \   000085   99           SUBB      A,R1
   \   000086   5010         JNC       ??zclGenericApp_event_loop_10
   \   000088   08           INC       R0
   \   000089   80F6         SJMP      ??CrossCallReturnLabel_8
   \                     ??zclGenericApp_event_loop_9:
   \   00008B   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00008E   8001         SJMP      ??zclGenericApp_event_loop_11
   \                     ??zclGenericApp_event_loop_12:
   \   000090   08           INC       R0
   \                     ??zclGenericApp_event_loop_11:
   \   000091   E0           MOVX      A,@DPTR
   \   000092   F9           MOV       R1,A
   \   000093   E8           MOV       A,R0
   \   000094   C3           CLR       C
   \   000095   99           SUBB      A,R1
   \   000096   40F8         JC        ??zclGenericApp_event_loop_12
   \                     ??zclGenericApp_event_loop_10:
   \   000098   8A82         MOV       DPL,R2
   \   00009A   8B83         MOV       DPH,R3
   \   00009C   E0           MOVX      A,@DPTR
   \   00009D   FA           MOV       R2,A
   \   00009E   A3           INC       DPTR
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   FB           MOV       R3,A
   \   0000A1   EA           MOV       A,R2
   \   0000A2   4B           ORL       A,R3
   \   0000A3   6094         JZ        ??zclGenericApp_event_loop_5
   \   0000A5                ; Setup parameters for call to function osal_mem_free
   \   0000A5   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000A8   808F         SJMP      ??zclGenericApp_event_loop_5
   \                     ??zclGenericApp_event_loop_8:
   \   0000AA                ; Setup parameters for call to function zclGenericApp_HandleKeys
   \   0000AA   A3           INC       DPTR
   \   0000AB   A3           INC       DPTR
   \   0000AC   A3           INC       DPTR
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   FA           MOV       R2,A
   \   0000AF   85..82       MOV       DPL,?V0
   \   0000B2   8B83         MOV       DPH,R3
   \   0000B4   A3           INC       DPTR
   \   0000B5   A3           INC       DPTR
   \   0000B6   E0           MOVX      A,@DPTR
   \   0000B7   F9           MOV       R1,A
   \   0000B8   12....       LCALL     `??zclGenericApp_HandleKeys::?relay`; Banked call to: zclGenericApp_HandleKeys
   \   0000BB   02....       LJMP      ??zclGenericApp_event_loop_5 & 0xFFFF
   \                     ??zclGenericApp_event_loop_6:
   \   0000BE   EE           MOV       A,R6
   \   0000BF   FA           MOV       R2,A
   \   0000C0   EF           MOV       A,R7
   \   0000C1   6480         XRL       A,#0x80
   \   0000C3   8045         SJMP      ??zclGenericApp_event_loop_13
    431            
    432          #if ZG_BUILD_ENDDEVICE_TYPE    
    433            if ( events & GENERICAPP_END_DEVICE_REJOIN_EVT )
   \                     ??zclGenericApp_event_loop_1:
   \   0000C5   5404         ANL       A,#0x4
   \   0000C7   6008         JZ        ??zclGenericApp_event_loop_14
    434            {
    435              bdb_ZedAttemptRecoverNwk();
   \   0000C9                ; Setup parameters for call to function bdb_ZedAttemptRecoverNwk
   \   0000C9   12....       LCALL     `??bdb_ZedAttemptRecoverNwk::?relay`; Banked call to: bdb_ZedAttemptRecoverNwk
    436              return ( events ^ GENERICAPP_END_DEVICE_REJOIN_EVT );
   \   0000CC   EE           MOV       A,R6
   \   0000CD   6404         XRL       A,#0x4
   \   0000CF   8037         SJMP      ??zclGenericApp_event_loop_15
    437            }
    438          #endif
    439          
    440            /* GENERICAPP_TODO: handle app events here */
    441            
    442            
    443            if ( events & GENERICAPP_EVT_1 )
   \                     ??zclGenericApp_event_loop_14:
   \   0000D1   EA           MOV       A,R2
   \   0000D2   5408         ANL       A,#0x8
   \   0000D4   6021         JZ        ??zclGenericApp_event_loop_16
    444            {
    445              zclGenericApp_ReadADC();    // Send battery info for first time initialization
   \   0000D6                ; Setup parameters for call to function zclGenericApp_ReadADC
   \   0000D6   12....       LCALL     `??zclGenericApp_ReadADC::?relay`; Banked call to: zclGenericApp_ReadADC
    446              NLME_SetPollRate( 0 );
   \   0000D9                ; Setup parameters for call to function NLME_SetPollRate
   \   0000D9   90....       MOV       DPTR,#__Constant_0
   \   0000DC   12....       LCALL     ?XLOAD_R2345
   \   0000DF   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
    447              NLME_SetQueuedPollRate( 0 );
   \   0000E2                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   0000E2   7A00         MOV       R2,#0x0
   \   0000E4   7B00         MOV       R3,#0x0
   \   0000E6   12....       LCALL     `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
    448              NLME_SetResponseRate( 0 );
   \   0000E9                ; Setup parameters for call to function NLME_SetResponseRate
   \   0000E9   7A00         MOV       R2,#0x0
   \   0000EB   7B00         MOV       R3,#0x0
   \   0000ED   12....       LCALL     `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
    449              HAL_TURN_OFF_LED1();    
   \   0000F0   C290         CLR       0x90.0
    450          
    451              return ( events ^ GENERICAPP_EVT_1 );
   \   0000F2   EE           MOV       A,R6
   \   0000F3   6408         XRL       A,#0x8
   \   0000F5   8011         SJMP      ??zclGenericApp_event_loop_15
    452            }
    453            
    454          
    455            if ( events & GENERICAPP_EVT_2 )
   \                     ??zclGenericApp_event_loop_16:
   \   0000F7   EA           MOV       A,R2
   \   0000F8   5410         ANL       A,#0x10
   \   0000FA   6011         JZ        ??zclGenericApp_event_loop_17
    456            {
    457            // Leaves the existing network reset ZED. Used for Factory Reset - if the button is pressed for 5 seconds 
    458              if ((HAL_KEY_SW_1_PORT & HAL_KEY_SW_1_BIT)) {
   \   0000FC   A2A0         MOV       C,0xa0.0
   \   0000FE   4005         JC        ??zclGenericApp_event_loop_18
    459              } else {
    460                      bdb_resetLocalAction();
   \   000100                ; Setup parameters for call to function bdb_resetLocalAction
   \   000100   12....       LCALL     `??bdb_resetLocalAction::?relay`; Banked call to: bdb_resetLocalAction
    461                      HAL_TURN_OFF_LED1();
   \   000103   C290         CLR       0x90.0
    462                     }  
    463          
    464              return ( events ^ GENERICAPP_EVT_2 );
   \                     ??zclGenericApp_event_loop_18:
   \   000105   EE           MOV       A,R6
   \   000106   6410         XRL       A,#0x10
   \                     ??zclGenericApp_event_loop_15:
   \   000108   FA           MOV       R2,A
   \   000109   EF           MOV       A,R7
   \                     ??zclGenericApp_event_loop_13:
   \   00010A   FB           MOV       R3,A
   \   00010B   800F         SJMP      ??zclGenericApp_event_loop_19
    465            }
    466          
    467          
    468            if ( events & GENERICAPP_EVT_3 )
   \                     ??zclGenericApp_event_loop_17:
   \   00010D   EA           MOV       A,R2
   \   00010E   5420         ANL       A,#0x20
   \   000110   6006         JZ        ??zclGenericApp_event_loop_20
    469            {
    470          
    471              return ( events ^ GENERICAPP_EVT_3 );
   \   000112   EA           MOV       A,R2
   \   000113   6420         XRL       A,#0x20
   \                     ??zclGenericApp_event_loop_2:
   \   000115   FA           MOV       R2,A
   \   000116   8004         SJMP      ??zclGenericApp_event_loop_19
    472            }
    473            
    474            // Discard unknown events
    475            return 0;
   \                     ??zclGenericApp_event_loop_20:
   \   000118   7A00         MOV       R2,#0x0
   \   00011A   7B00         MOV       R3,#0x0
   \                     ??zclGenericApp_event_loop_19:
   \   00011C   7F04         MOV       R7,#0x4
   \   00011E   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000121                REQUIRE _A_P1
   \   000121                REQUIRE _A_P2
    476          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   8882         MOV       DPL,R0
   \   000002   8983         MOV       DPH,R1
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F8           MOV       R0,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   8882         MOV       DPL,R0
   \   00000A   F583         MOV       DPH,A
   \   00000C   7800         MOV       R0,#0x0
   \   00000E   22           RET
    477          
    478          
    479          /*********************************************************************
    480           * @fn      zclGenericApp_HandleKeys
    481           *
    482           * @brief   Handles all key events for this device.
    483           *
    484           * @param   shift - true if in shift/alt.
    485           * @param   keys - bit field for key events. Valid entries:
    486           *                 HAL_KEY_SW_5
    487           *                 HAL_KEY_SW_4
    488           *                 HAL_KEY_SW_2
    489           *                 HAL_KEY_SW_1
    490           *
    491           * @return  none
    492           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    493          static void zclGenericApp_HandleKeys( byte shift, byte keys )
   \                     zclGenericApp_HandleKeys:
    494          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
    495            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV       C,0xE0 /* A   */.0
   \   000009   501E         JNC       ??zclGenericApp_HandleKeys_0
    496            {
    497              HAL_TURN_ON_LED1();
   \   00000B   D290         SETB      0x90.0
    498              osal_start_timerEx( zclGenericApp_TaskID, GENERICAPP_EVT_2, 5000 );
   \   00000D                ; Setup parameters for call to function osal_start_timerEx
   \   00000D   90....       MOV       DPTR,#__Constant_1388
   \   000010   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000013   7A10         MOV       R2,#0x10
   \   000015   7B00         MOV       R3,#0x0
   \   000017   90....       MOV       DPTR,#zclGenericApp_TaskID
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F9           MOV       R1,A
   \   00001C   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00001F   7404         MOV       A,#0x4
   \   000021   12....       LCALL     ?DEALLOC_XSTACK8
    499              bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING);
   \   000024                ; Setup parameters for call to function bdb_StartCommissioning
   \   000024   7902         MOV       R1,#0x2
   \   000026   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
    500            }
    501          
    502            if ( keys & HAL_KEY_SW_6 )
   \                     ??zclGenericApp_HandleKeys_0:
   \   000029   EE           MOV       A,R6
   \   00002A   A2E5         MOV       C,0xE0 /* A   */.5
   \   00002C   4003         JC        $+5
   \   00002E   02....       LJMP      ??zclGenericApp_HandleKeys_1 & 0xFFFF
    503            {
    504              // Send switch on/off command
    505              if (isToggleSet6) {
   \   000031   90....       MOV       DPTR,#isToggleSet6
   \   000034   E0           MOVX      A,@DPTR
   \   000035   602F         JZ        ??zclGenericApp_HandleKeys_2
    506                  zclGeneral_SendOnOff_CmdOn( GENERICAPP_ENDPOINT3, &zclGenericApp_DstAddr3, FALSE, bdb_getZCLFrameCounter() );
   \   000037                ; Setup parameters for call to function bdb_getZCLFrameCounter
   \   000037   12....       LCALL     ?Subroutine1 & 0xFFFF
    507              } else {
   \                     ??CrossCallReturnLabel_0:
   \   00003A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003D   78..         MOV       R0,#?V0
   \   00003F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000042   E9           MOV       A,R1
   \   000043   F5..         MOV       ?V0,A
   \   000045   78..         MOV       R0,#?V0
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00004A   E4           CLR       A
   \   00004B   F5..         MOV       ?V0,A
   \   00004D   78..         MOV       R0,#?V0
   \   00004F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000052   78..         MOV       R0,#?V0
   \   000054   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000057   78..         MOV       R0,#?V0
   \   000059   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005C   75..01       MOV       ?V0,#0x1
   \   00005F   78..         MOV       R0,#?V0
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000064   8030         SJMP      ??zclGenericApp_HandleKeys_3
    508                  zclGeneral_SendOnOff_CmdOff( GENERICAPP_ENDPOINT3, &zclGenericApp_DstAddr3, FALSE, bdb_getZCLFrameCounter() );
   \                     ??zclGenericApp_HandleKeys_2:
   \   000066                ; Setup parameters for call to function bdb_getZCLFrameCounter
   \   000066   12....       LCALL     ?Subroutine1 & 0xFFFF
    509              }
   \                     ??CrossCallReturnLabel_1:
   \   000069   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006C   78..         MOV       R0,#?V0
   \   00006E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000071   E9           MOV       A,R1
   \   000072   F5..         MOV       ?V0,A
   \   000074   78..         MOV       R0,#?V0
   \   000076   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000079   E4           CLR       A
   \   00007A   F5..         MOV       ?V0,A
   \   00007C   78..         MOV       R0,#?V0
   \   00007E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000081   78..         MOV       R0,#?V0
   \   000083   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000086   78..         MOV       R0,#?V0
   \   000088   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00008B   75..01       MOV       ?V0,#0x1
   \   00008E   78..         MOV       R0,#?V0
   \   000090   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000093   75..00       MOV       ?V0,#0x0
   \                     ??zclGenericApp_HandleKeys_3:
   \   000096   78..         MOV       R0,#?V0
   \   000098   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00009B   7C06         MOV       R4,#0x6
   \   00009D   7D00         MOV       R5,#0x0
   \   00009F   7A..         MOV       R2,#zclGenericApp_DstAddr3 & 0xff
   \   0000A1   7B..         MOV       R3,#(zclGenericApp_DstAddr3 >> 8) & 0xff
   \   0000A3   7903         MOV       R1,#0x3
   \   0000A5   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000A8   740B         MOV       A,#0xb
   \   0000AA   12....       LCALL     ?DEALLOC_XSTACK8
    510                // Skift tilstanden
    511              isToggleSet6 = !isToggleSet6;
   \   0000AD   90....       MOV       DPTR,#isToggleSet6
   \   0000B0   E0           MOVX      A,@DPTR
   \   0000B1   7004         JNZ       ??zclGenericApp_HandleKeys_4
   \   0000B3   7401         MOV       A,#0x1
   \   0000B5   8001         SJMP      ??zclGenericApp_HandleKeys_5
   \                     ??zclGenericApp_HandleKeys_4:
   \   0000B7   E4           CLR       A
   \                     ??zclGenericApp_HandleKeys_5:
   \   0000B8   F0           MOVX      @DPTR,A
    512            zclGenericApp_ReadADC();
   \   0000B9                ; Setup parameters for call to function zclGenericApp_ReadADC
   \   0000B9   12....       LCALL     `??zclGenericApp_ReadADC::?relay`; Banked call to: zclGenericApp_ReadADC
    513            }  
    514          
    515            if ( keys & HAL_KEY_SW_5 )
   \                     ??zclGenericApp_HandleKeys_1:
   \   0000BC   EE           MOV       A,R6
   \   0000BD   A2E2         MOV       C,0xE0 /* A   */.2
   \   0000BF   4003         JC        $+5
   \   0000C1   02....       LJMP      ??zclGenericApp_HandleKeys_6 & 0xFFFF
    516            {
    517              // Send switch on/off command
    518              if (isToggleSet5) {
   \   0000C4   90....       MOV       DPTR,#isToggleSet5
   \   0000C7   E0           MOVX      A,@DPTR
   \   0000C8   602F         JZ        ??zclGenericApp_HandleKeys_7
    519                  zclGeneral_SendOnOff_CmdOn( GENERICAPP_ENDPOINT2, &zclGenericApp_DstAddr2, FALSE, bdb_getZCLFrameCounter() );
   \   0000CA                ; Setup parameters for call to function bdb_getZCLFrameCounter
   \   0000CA   12....       LCALL     ?Subroutine1 & 0xFFFF
    520              } else {
   \                     ??CrossCallReturnLabel_2:
   \   0000CD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D0   78..         MOV       R0,#?V0
   \   0000D2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D5   E9           MOV       A,R1
   \   0000D6   F5..         MOV       ?V0,A
   \   0000D8   78..         MOV       R0,#?V0
   \   0000DA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000DD   E4           CLR       A
   \   0000DE   F5..         MOV       ?V0,A
   \   0000E0   78..         MOV       R0,#?V0
   \   0000E2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E5   78..         MOV       R0,#?V0
   \   0000E7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000EA   78..         MOV       R0,#?V0
   \   0000EC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000EF   75..01       MOV       ?V0,#0x1
   \   0000F2   78..         MOV       R0,#?V0
   \   0000F4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F7   8030         SJMP      ??zclGenericApp_HandleKeys_8
    521                  zclGeneral_SendOnOff_CmdOff( GENERICAPP_ENDPOINT2, &zclGenericApp_DstAddr2, FALSE, bdb_getZCLFrameCounter() );
   \                     ??zclGenericApp_HandleKeys_7:
   \   0000F9                ; Setup parameters for call to function bdb_getZCLFrameCounter
   \   0000F9   12....       LCALL     ?Subroutine1 & 0xFFFF
    522              }
   \                     ??CrossCallReturnLabel_3:
   \   0000FC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000FF   78..         MOV       R0,#?V0
   \   000101   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000104   E9           MOV       A,R1
   \   000105   F5..         MOV       ?V0,A
   \   000107   78..         MOV       R0,#?V0
   \   000109   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00010C   E4           CLR       A
   \   00010D   F5..         MOV       ?V0,A
   \   00010F   78..         MOV       R0,#?V0
   \   000111   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000114   78..         MOV       R0,#?V0
   \   000116   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000119   78..         MOV       R0,#?V0
   \   00011B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00011E   75..01       MOV       ?V0,#0x1
   \   000121   78..         MOV       R0,#?V0
   \   000123   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000126   75..00       MOV       ?V0,#0x0
   \                     ??zclGenericApp_HandleKeys_8:
   \   000129   78..         MOV       R0,#?V0
   \   00012B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00012E   7C06         MOV       R4,#0x6
   \   000130   7D00         MOV       R5,#0x0
   \   000132   7A..         MOV       R2,#zclGenericApp_DstAddr2 & 0xff
   \   000134   7B..         MOV       R3,#(zclGenericApp_DstAddr2 >> 8) & 0xff
   \   000136   7902         MOV       R1,#0x2
   \   000138   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   00013B   740B         MOV       A,#0xb
   \   00013D   12....       LCALL     ?DEALLOC_XSTACK8
    523                // Skift tilstanden
    524              isToggleSet5 = !isToggleSet5;
   \   000140   90....       MOV       DPTR,#isToggleSet5
   \   000143   E0           MOVX      A,@DPTR
   \   000144   7004         JNZ       ??zclGenericApp_HandleKeys_9
   \   000146   7401         MOV       A,#0x1
   \   000148   8001         SJMP      ??zclGenericApp_HandleKeys_10
   \                     ??zclGenericApp_HandleKeys_9:
   \   00014A   E4           CLR       A
   \                     ??zclGenericApp_HandleKeys_10:
   \   00014B   F0           MOVX      @DPTR,A
    525            zclGenericApp_ReadADC();
   \   00014C                ; Setup parameters for call to function zclGenericApp_ReadADC
   \   00014C   12....       LCALL     `??zclGenericApp_ReadADC::?relay`; Banked call to: zclGenericApp_ReadADC
    526            } 
    527          
    528            if ( keys & HAL_KEY_SW_4 )
   \                     ??zclGenericApp_HandleKeys_6:
   \   00014F   EE           MOV       A,R6
   \   000150   A2E3         MOV       C,0xE0 /* A   */.3
   \   000152   4003         JC        $+5
   \   000154   02....       LJMP      ??zclGenericApp_HandleKeys_11 & 0xFFFF
    529            {
    530                // Send switch on/off command
    531              if (isToggleSet4) {
   \   000157   90....       MOV       DPTR,#isToggleSet4
   \   00015A   E0           MOVX      A,@DPTR
   \   00015B   602F         JZ        ??zclGenericApp_HandleKeys_12
    532                  zclGeneral_SendOnOff_CmdOn( GENERICAPP_ENDPOINT, &zclGenericApp_DstAddr, FALSE, bdb_getZCLFrameCounter() );
   \   00015D                ; Setup parameters for call to function bdb_getZCLFrameCounter
   \   00015D   12....       LCALL     ?Subroutine1 & 0xFFFF
    533              } else {
   \                     ??CrossCallReturnLabel_4:
   \   000160   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000163   78..         MOV       R0,#?V0
   \   000165   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000168   E9           MOV       A,R1
   \   000169   F5..         MOV       ?V0,A
   \   00016B   78..         MOV       R0,#?V0
   \   00016D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000170   E4           CLR       A
   \   000171   F5..         MOV       ?V0,A
   \   000173   78..         MOV       R0,#?V0
   \   000175   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000178   78..         MOV       R0,#?V0
   \   00017A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00017D   78..         MOV       R0,#?V0
   \   00017F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000182   75..01       MOV       ?V0,#0x1
   \   000185   78..         MOV       R0,#?V0
   \   000187   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00018A   8030         SJMP      ??zclGenericApp_HandleKeys_13
    534                  zclGeneral_SendOnOff_CmdOff( GENERICAPP_ENDPOINT, &zclGenericApp_DstAddr, FALSE, bdb_getZCLFrameCounter() );
   \                     ??zclGenericApp_HandleKeys_12:
   \   00018C                ; Setup parameters for call to function bdb_getZCLFrameCounter
   \   00018C   12....       LCALL     ?Subroutine1 & 0xFFFF
    535              }
   \                     ??CrossCallReturnLabel_5:
   \   00018F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000192   78..         MOV       R0,#?V0
   \   000194   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000197   E9           MOV       A,R1
   \   000198   F5..         MOV       ?V0,A
   \   00019A   78..         MOV       R0,#?V0
   \   00019C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00019F   E4           CLR       A
   \   0001A0   F5..         MOV       ?V0,A
   \   0001A2   78..         MOV       R0,#?V0
   \   0001A4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A7   78..         MOV       R0,#?V0
   \   0001A9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001AC   78..         MOV       R0,#?V0
   \   0001AE   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001B1   75..01       MOV       ?V0,#0x1
   \   0001B4   78..         MOV       R0,#?V0
   \   0001B6   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001B9   75..00       MOV       ?V0,#0x0
   \                     ??zclGenericApp_HandleKeys_13:
   \   0001BC   78..         MOV       R0,#?V0
   \   0001BE   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001C1   7C06         MOV       R4,#0x6
   \   0001C3   7D00         MOV       R5,#0x0
   \   0001C5   7A..         MOV       R2,#zclGenericApp_DstAddr & 0xff
   \   0001C7   7B..         MOV       R3,#(zclGenericApp_DstAddr >> 8) & 0xff
   \   0001C9   7901         MOV       R1,#0x1
   \   0001CB   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0001CE   740B         MOV       A,#0xb
   \   0001D0   12....       LCALL     ?DEALLOC_XSTACK8
    536                // Skift tilstanden
    537              isToggleSet4 = !isToggleSet4;
   \   0001D3   90....       MOV       DPTR,#isToggleSet4
   \   0001D6   E0           MOVX      A,@DPTR
   \   0001D7   7004         JNZ       ??zclGenericApp_HandleKeys_14
   \   0001D9   7401         MOV       A,#0x1
   \   0001DB   8001         SJMP      ??zclGenericApp_HandleKeys_15
   \                     ??zclGenericApp_HandleKeys_14:
   \   0001DD   E4           CLR       A
   \                     ??zclGenericApp_HandleKeys_15:
   \   0001DE   F0           MOVX      @DPTR,A
    538            zclGenericApp_ReadADC();
   \   0001DF                ; Setup parameters for call to function zclGenericApp_ReadADC
   \   0001DF   12....       LCALL     `??zclGenericApp_ReadADC::?relay`; Banked call to: zclGenericApp_ReadADC
    539            } 
    540          }
   \                     ??zclGenericApp_HandleKeys_11:
   \   0001E2   7F02         MOV       R7,#0x2
   \   0001E4   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   0001E7                REQUIRE _A_P1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     `??bdb_getZCLFrameCounter::?relay`; Banked call to: bdb_getZCLFrameCounter
   \   000003   E9           MOV       A,R1
   \   000004   F9           MOV       R1,A
   \   000005                ; Setup parameters for call to function zcl_SendCommand
   \   000005                ; Setup parameters for call to function zcl_SendCommand
   \   000005                ; Setup parameters for call to function zcl_SendCommand
   \   000005                ; Setup parameters for call to function zcl_SendCommand
   \   000005                ; Setup parameters for call to function zcl_SendCommand
   \   000005                ; Setup parameters for call to function zcl_SendCommand
   \   000005   E4           CLR       A
   \   000006   F5..         MOV       ?V0,A
   \   000008   F5..         MOV       ?V1,A
   \   00000A   78..         MOV       R0,#?V0
   \   00000C   22           RET
    541          
    542          
    543          /*********************************************************************
    544           * @fn      zclGenericApp_ProcessCommissioningStatus
    545           *
    546           * @brief   Callback in which the status of the commissioning process are reported
    547           *
    548           * @param   bdbCommissioningModeMsg - Context message of the status of a commissioning process
    549           *
    550           * @return  none
    551           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    552          static void zclGenericApp_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg)
   \                     zclGenericApp_ProcessCommissioningStatus:
    553          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    554            switch(bdbCommissioningModeMsg->bdbCommissioningMode)
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   14           DEC       A
   \   00000B   601B         JZ        ??zclGenericApp_ProcessCommissioningStatus_0
   \   00000D   14           DEC       A
   \   00000E   6006         JZ        ??zclGenericApp_ProcessCommissioningStatus_1
   \   000010   24FD         ADD       A,#-0x3
   \   000012   6025         JZ        ??zclGenericApp_ProcessCommissioningStatus_2
   \   000014   8043         SJMP      ??zclGenericApp_ProcessCommissioningStatus_3
    555            {
    556              case BDB_COMMISSIONING_FORMATION:
    557                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
   \                     ??zclGenericApp_ProcessCommissioningStatus_1:
   \   000016   8A82         MOV       DPL,R2
   \   000018   8B83         MOV       DPH,R3
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   703C         JNZ       ??zclGenericApp_ProcessCommissioningStatus_3
    558                {
    559                  //After formation, perform nwk steering again plus the remaining commissioning modes that has not been process yet
    560                  bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING | bdbCommissioningModeMsg->bdbRemainingCommissioningModes);
   \   00001D                ; Setup parameters for call to function bdb_StartCommissioning
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   4402         ORL       A,#0x2
   \   000022   F9           MOV       R1,A
   \   000023   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
   \   000026   8031         SJMP      ??zclGenericApp_ProcessCommissioningStatus_3
    561                }
    562                else
    563                {
    564                  //Want to try other channels?
    565                  //try with bdb_setChannelAttribute
    566                }
    567              break;
    568              case BDB_COMMISSIONING_NWK_STEERING:
    569                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
   \                     ??zclGenericApp_ProcessCommissioningStatus_0:
   \   000028   8A82         MOV       DPL,R2
   \   00002A   8B83         MOV       DPH,R3
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   702A         JNZ       ??zclGenericApp_ProcessCommissioningStatus_3
    570                {
    571                  //YOUR JOB:
    572                  //We are on the nwk, what now?
    573                  osal_start_timerEx( zclGenericApp_TaskID, GENERICAPP_EVT_1, 5000 );
   \   00002F                ; Setup parameters for call to function osal_start_timerEx
   \   00002F   90....       MOV       DPTR,#__Constant_1388
   \   000032   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000035   7A08         MOV       R2,#0x8
   \   000037   8011         SJMP      ??zclGenericApp_ProcessCommissioningStatus_4
    574                }
    575                else
    576                {
    577                  //See the possible errors for nwk steering procedure
    578                  //No suitable networks found
    579                  //Want to try other channels?
    580                  //try with bdb_setChannelAttribute
    581                }
    582              break;
    583              case BDB_COMMISSIONING_FINDING_BINDING:
    584                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
    585                {
    586                  //YOUR JOB:
    587                }
    588                else
    589                {
    590                  //YOUR JOB:
    591                  //retry?, wait for user interaction?
    592                }
    593              break;
    594              case BDB_COMMISSIONING_INITIALIZATION:
    595                //Initialization notification can only be successful. Failure on initialization
    596                //only happens for ZED and is notified as BDB_COMMISSIONING_PARENT_LOST notification
    597          
    598                //YOUR JOB:
    599                //We are on a network, what now?
    600          
    601                 // The device tries to join a new network upon startup, if it has not joined any network before (like a re-flashed device).
    602          //      if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS) {
    603          //      } else if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_NO_NETWORK) {
    604          //        HAL_TURN_ON_LED1();
    605          //        bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING);
    606          //      }     
    607              
    608              break;
    609          #if ZG_BUILD_ENDDEVICE_TYPE    
    610              case BDB_COMMISSIONING_PARENT_LOST:
    611                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_NETWORK_RESTORED)
   \                     ??zclGenericApp_ProcessCommissioningStatus_2:
   \   000039   8A82         MOV       DPL,R2
   \   00003B   8B83         MOV       DPH,R3
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   640D         XRL       A,#0xd
   \   000040   6017         JZ        ??zclGenericApp_ProcessCommissioningStatus_3
    612                {
    613                  //We did recover from losing parent
    614                }
    615                else
    616                {
    617                  //Parent not found, attempt to rejoin again after a fixed delay
    618                  osal_start_timerEx(zclGenericApp_TaskID, GENERICAPP_END_DEVICE_REJOIN_EVT, GENERICAPP_END_DEVICE_REJOIN_DELAY);
   \   000042                ; Setup parameters for call to function osal_start_timerEx
   \   000042   90....       MOV       DPTR,#__Constant_2710
   \   000045   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000048   7A04         MOV       R2,#0x4
   \                     ??zclGenericApp_ProcessCommissioningStatus_4:
   \   00004A   7B00         MOV       R3,#0x0
   \   00004C   90....       MOV       DPTR,#zclGenericApp_TaskID
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   F9           MOV       R1,A
   \   000051   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000054   7404         MOV       A,#0x4
   \   000056   12....       LCALL     ?DEALLOC_XSTACK8
    619                }
    620              break;
    621          #endif 
    622            }
    623          }
   \                     ??zclGenericApp_ProcessCommissioningStatus_3:
   \   000059                REQUIRE ?Subroutine0
   \   000059                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    624          
    625          /*********************************************************************
    626           * @fn      zclGenericApp_ProcessIdentifyTimeChange
    627           *
    628           * @brief   Called to process any change to the IdentifyTime attribute.
    629           *
    630           * @param   endpoint - in which the identify has change
    631           *
    632           * @return  none
    633           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    634          static void zclGenericApp_ProcessIdentifyTimeChange( uint8 endpoint )
   \                     zclGenericApp_ProcessIdentifyTimeChange:
    635          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    636            (void) endpoint;
    637          
    638            if ( zclGenericApp_IdentifyTime > 0 )
   \   000004   90....       MOV       DPTR,#zclGenericApp_IdentifyTime
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F8           MOV       R0,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F9           MOV       R1,A
   \   00000C   E8           MOV       A,R0
   \   00000D   49           ORL       A,R1
   \   00000E   600F         JZ        ??zclGenericApp_ProcessIdentifyTimeChange_0
    639            {
    640              HalLedBlink ( HAL_LED_2, 0xFF, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
   \   000010                ; Setup parameters for call to function HalLedBlink
   \   000010   7CE8         MOV       R4,#-0x18
   \   000012   7D03         MOV       R5,#0x3
   \   000014   7B05         MOV       R3,#0x5
   \   000016   7AFF         MOV       R2,#-0x1
   \   000018   7902         MOV       R1,#0x2
   \   00001A   12....       LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
   \   00001D   8007         SJMP      ??zclGenericApp_ProcessIdentifyTimeChange_1
    641            }
    642            else
    643            {
    644              HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF );
   \                     ??zclGenericApp_ProcessIdentifyTimeChange_0:
   \   00001F                ; Setup parameters for call to function HalLedSet
   \   00001F   7A00         MOV       R2,#0x0
   \   000021   7902         MOV       R1,#0x2
   \   000023   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
    645            }
    646          }
   \                     ??zclGenericApp_ProcessIdentifyTimeChange_1:
   \   000026   80..         SJMP      ?Subroutine0
    647          
    648          /*********************************************************************
    649           * @fn      zclGenericApp_BindNotification
    650           *
    651           * @brief   Called when a new bind is added.
    652           *
    653           * @param   data - pointer to new bind data
    654           *
    655           * @return  none
    656           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    657          static void zclGenericApp_BindNotification( bdbBindNotificationData_t *data )
   \                     zclGenericApp_BindNotification:
    658          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    659            // GENERICAPP_TODO: process the new bind information
    660          }
   \   000000   02....       LJMP      ?BRET
    661          
    662          
    663          /*********************************************************************
    664           * @fn      zclGenericApp_ProcessTouchlinkTargetEnable
    665           *
    666           * @brief   Called to process when the touchlink target functionality
    667           *          is enabled or disabled
    668           *
    669           * @param   none
    670           *
    671           * @return  none
    672           */
    673          #if ( defined ( BDB_TL_TARGET ) && (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE) )
    674          static void zclGenericApp_ProcessTouchlinkTargetEnable( uint8 enable )
    675          {
    676            if ( enable )
    677            {
    678              HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
    679            }
    680            else
    681            {
    682              HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
    683            }
    684          }
    685          #endif
    686          
    687          /*********************************************************************
    688           * @fn      zclGenericApp_BasicResetCB
    689           *
    690           * @brief   Callback from the ZCL General Cluster Library
    691           *          to set all the Basic Cluster attributes to default values.
    692           *
    693           * @param   none
    694           *
    695           * @return  none
    696           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    697          static void zclGenericApp_BasicResetCB( void )
   \                     zclGenericApp_BasicResetCB:
    698          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    699          
    700            /* GENERICAPP_TODO: remember to update this function with any
    701               application-specific cluster attribute variables */
    702            
    703            zclGenericApp_ResetAttributesToDefaultValues();
   \   000004                ; Setup parameters for call to function zclGenericApp_ResetAttributesToDefaultValues
   \   000004   12....       LCALL     `??zclGenericApp_ResetAttributesToDefaultValues:`; Banked call to: zclGenericApp_ResetAttributesToDefaultValues
    704            
    705          }
   \   000007   80..         SJMP      ?Subroutine0
    706          /*********************************************************************
    707           * @fn      zclSampleApp_BatteryWarningCB
    708           *
    709           * @brief   Called to handle battery-low situation.
    710           *
    711           * @param   voltLevel - level of severity
    712           *
    713           * @return  none
    714           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    715          void zclSampleApp_BatteryWarningCB( uint8 voltLevel )
   \                     zclSampleApp_BatteryWarningCB:
    716          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    717            if ( voltLevel == VOLT_LEVEL_CAUTIOUS )
    718            {
    719              // Send warning message to the gateway and blink LED
    720            }
    721            else if ( voltLevel == VOLT_LEVEL_BAD )
    722            {
    723              // Shut down the system
    724            }
    725          }
   \   000000   02....       LJMP      ?BRET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclGenericApp_OnOffSwitchTyp`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclGenericApp_NwkState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sampleSw_TestEp>`:
   \   000000   01           DB 1
   \   000001   00           DB 0
   \   000002   ....         DW zclGenericApp_TaskID
   \   000004   0000         DW 0H
   \   000006   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sampleSw_TestEp2>`:
   \   000000   02           DB 2
   \   000001   00           DB 0
   \   000002   ....         DW zclGenericApp_TaskID
   \   000004   0000         DW 0H
   \   000006   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sampleSw_TestEp3>`:
   \   000000   03           DB 3
   \   000001   00           DB 0
   \   000002   ....         DW zclGenericApp_TaskID
   \   000004   0000         DW 0H
   \   000006   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclGenericApp_CmdCallbacks>`:
   \   000000   ....         DW `??zclGenericApp_BasicResetCB::?relay`
   \   000002   0000         DW 0H
   \   000004   0000         DW 0H
   \   000006   0000         DW 0H
   \   000008   0000         DW 0H
   \   00000A   0000         DW 0H
   \   00000C   0000         DW 0H
   \   00000E   0000         DW 0H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1388:
   \   000000   88130000     DD 5000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2710:
   \   000000   10270000     DD 10000
    726          
    727          /******************************************************************************
    728           *
    729           *  Functions for processing ZCL Foundation incoming Command/Response messages
    730           *
    731           *****************************************************************************/
    732          
    733          /*********************************************************************
    734           * @fn      zclGenericApp_ProcessIncomingMsg
    735           *
    736           * @brief   Process ZCL Foundation incoming message
    737           *
    738           * @param   pInMsg - pointer to the received message
    739           *
    740           * @return  none
    741           */
    742          static void zclGenericApp_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
    743          {
    744            switch ( pInMsg->zclHdr.commandID )
    745            {
    746          #ifdef ZCL_READ
    747              case ZCL_CMD_READ_RSP:
    748                zclGenericApp_ProcessInReadRspCmd( pInMsg );
    749                break;
    750          #endif
    751          #ifdef ZCL_WRITE
    752              case ZCL_CMD_WRITE_RSP:
    753                zclGenericApp_ProcessInWriteRspCmd( pInMsg );
    754                break;
    755          #endif
    756              case ZCL_CMD_CONFIG_REPORT:
    757              case ZCL_CMD_CONFIG_REPORT_RSP:
    758              case ZCL_CMD_READ_REPORT_CFG:
    759              case ZCL_CMD_READ_REPORT_CFG_RSP:
    760              case ZCL_CMD_REPORT:
    761                //bdb_ProcessIncomingReportingMsg( pInMsg );
    762                break;
    763                
    764              case ZCL_CMD_DEFAULT_RSP:
    765                zclGenericApp_ProcessInDefaultRspCmd( pInMsg );
    766                break;
    767          #ifdef ZCL_DISCOVER
    768              case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
    769                zclGenericApp_ProcessInDiscCmdsRspCmd( pInMsg );
    770                break;
    771          
    772              case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
    773                zclGenericApp_ProcessInDiscCmdsRspCmd( pInMsg );
    774                break;
    775          
    776              case ZCL_CMD_DISCOVER_ATTRS_RSP:
    777                zclGenericApp_ProcessInDiscAttrsRspCmd( pInMsg );
    778                break;
    779          
    780              case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
    781                zclGenericApp_ProcessInDiscAttrsExtRspCmd( pInMsg );
    782                break;
    783          #endif
    784              default:
    785                break;
    786            }
    787          
    788            if ( pInMsg->attrCmd )
    789              osal_mem_free( pInMsg->attrCmd );
    790          }
    791          
    792          #ifdef ZCL_READ
    793          /*********************************************************************
    794           * @fn      zclGenericApp_ProcessInReadRspCmd
    795           *
    796           * @brief   Process the "Profile" Read Response Command
    797           *
    798           * @param   pInMsg - incoming message to process
    799           *
    800           * @return  none
    801           */
    802          static uint8 zclGenericApp_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
    803          {
    804            zclReadRspCmd_t *readRspCmd;
    805            uint8 i;
    806          
    807            readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
    808            for (i = 0; i < readRspCmd->numAttr; i++)
    809            {
    810              // Notify the originator of the results of the original read attributes
    811              // attempt and, for each successfull request, the value of the requested
    812              // attribute
    813            }
    814          
    815            return ( TRUE );
    816          }
    817          #endif // ZCL_READ
    818          
    819          #ifdef ZCL_WRITE
    820          /*********************************************************************
    821           * @fn      zclGenericApp_ProcessInWriteRspCmd
    822           *
    823           * @brief   Process the "Profile" Write Response Command
    824           *
    825           * @param   pInMsg - incoming message to process
    826           *
    827           * @return  none
    828           */
    829          static uint8 zclGenericApp_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
    830          {
    831            zclWriteRspCmd_t *writeRspCmd;
    832            uint8 i;
    833          
    834            writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
    835            for ( i = 0; i < writeRspCmd->numAttr; i++ )
    836            {
    837              // Notify the device of the results of the its original write attributes
    838              // command.
    839            }
    840          
    841            return ( TRUE );
    842          }
    843          #endif // ZCL_WRITE
    844          
    845          /*********************************************************************
    846           * @fn      zclGenericApp_ProcessInDefaultRspCmd
    847           *
    848           * @brief   Process the "Profile" Default Response Command
    849           *
    850           * @param   pInMsg - incoming message to process
    851           *
    852           * @return  none
    853           */
    854          static uint8 zclGenericApp_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
    855          {
    856            // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
    857          
    858            // Device is notified of the Default Response command.
    859            (void)pInMsg;
    860          
    861            return ( TRUE );
    862          }
    863          
    864          #ifdef ZCL_DISCOVER
    865          /*********************************************************************
    866           * @fn      zclGenericApp_ProcessInDiscCmdsRspCmd
    867           *
    868           * @brief   Process the Discover Commands Response Command
    869           *
    870           * @param   pInMsg - incoming message to process
    871           *
    872           * @return  none
    873           */
    874          static uint8 zclGenericApp_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
    875          {
    876            zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
    877            uint8 i;
    878          
    879            discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
    880            for ( i = 0; i < discoverRspCmd->numCmd; i++ )
    881            {
    882              // Device is notified of the result of its attribute discovery command.
    883            }
    884          
    885            return ( TRUE );
    886          }
    887          
    888          /*********************************************************************
    889           * @fn      zclGenericApp_ProcessInDiscAttrsRspCmd
    890           *
    891           * @brief   Process the "Profile" Discover Attributes Response Command
    892           *
    893           * @param   pInMsg - incoming message to process
    894           *
    895           * @return  none
    896           */
    897          static uint8 zclGenericApp_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
    898          {
    899            zclDiscoverAttrsRspCmd_t *discoverRspCmd;
    900            uint8 i;
    901          
    902            discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
    903            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
    904            {
    905              // Device is notified of the result of its attribute discovery command.
    906            }
    907          
    908            return ( TRUE );
    909          }
    910          
    911          /*********************************************************************
    912           * @fn      zclGenericApp_ProcessInDiscAttrsExtRspCmd
    913           *
    914           * @brief   Process the "Profile" Discover Attributes Extended Response Command
    915           *
    916           * @param   pInMsg - incoming message to process
    917           *
    918           * @return  none
    919           */
    920          static uint8 zclGenericApp_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
    921          {
    922            zclDiscoverAttrsExtRsp_t *discoverRspCmd;
    923            uint8 i;
    924          
    925            discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
    926            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
    927            {
    928              // Device is notified of the result of its attribute discovery command.
    929            }
    930          
    931            return ( TRUE );
    932          }
    933          #endif // ZCL_DISCOVER
    934          
    935          /****************************************************************************
    936          ****************************************************************************/
    937          
    938          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   zclGenericApp_BasicResetCB
        2      0   -> zclGenericApp_ResetAttributesToDefaultValues
      0      0   zclGenericApp_BindNotification
      0     33   zclGenericApp_HandleKeys
        0     10   -> bdb_StartCommissioning
        0     10   -> bdb_getZCLFrameCounter
        0     14   -> osal_start_timerEx
        0     10   -> zclGenericApp_ReadADC
        0     21   -> zcl_SendCommand
      0      9   zclGenericApp_Init
        0      9   -> RegisterForKeys
        0      9   -> RegisterVoltageWarningCB
        0      9   -> afRegister
        0      9   -> bdb_RegisterBindNotificationCB
        0      9   -> bdb_RegisterCommissioningStatusCB
        0      9   -> bdb_RegisterIdentifyTimeChangeCB
        0      9   -> bdb_RegisterSimpleDescriptor
        0      9   -> bdb_StartCommissioning
        0      9   -> zclGeneral_RegisterCmdCallbacks
        0      9   -> zcl_registerAttrList
        0      9   -> zcl_registerForMsg
      2      4   zclGenericApp_ProcessCommissioningStatus
        2      0   -> bdb_StartCommissioning
        2      4   -> osal_start_timerEx
      2      0   zclGenericApp_ProcessIdentifyTimeChange
        2      0   -> HalLedBlink
        2      0   -> HalLedSet
      0     12   zclGenericApp_event_loop
        0     12   -> NLME_SetPollRate
        0     12   -> NLME_SetQueuedPollRate
        0     12   -> NLME_SetResponseRate
        0     12   -> bdb_ZedAttemptRecoverNwk
        0     12   -> bdb_resetLocalAction
        0     12   -> osal_mem_free
        0     12   -> osal_msg_deallocate
        0     12   -> osal_msg_receive
        0     12   -> zclGenericApp_HandleKeys
        0     12   -> zclGenericApp_ReadADC
      0      0   zclSampleApp_BatteryWarningCB


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ?<Initializer for sampleSw_TestEp2>
       7  ?<Initializer for sampleSw_TestEp3>
       7  ?<Initializer for sampleSw_TestEp>
      16  ?<Initializer for zclGenericApp_CmdCallbacks>
       1  ?<Initializer for zclGenericApp_NwkState>
       1  ?<Initializer for zclGenericApp_OnOffSwitchTyp
       7  ?Subroutine0
      13  ?Subroutine1
      14  ?Subroutine2
      15  ?Subroutine3
       1  _A_P1
       1  _A_P2
       4  __Constant_0
       4  __Constant_1388
       4  __Constant_2710
       1  gPermitDuration
       1  giGenAppScreenMode
       1  isToggleSet4
       1  isToggleSet5
       1  isToggleSet6
       7  sampleSw_TestEp
       7  sampleSw_TestEp2
       7  sampleSw_TestEp3
       9  zclGenericApp_BasicResetCB
       3  zclGenericApp_BindNotification
      16  zclGenericApp_CmdCallbacks
      12  zclGenericApp_DstAddr
      12  zclGenericApp_DstAddr2
      12  zclGenericApp_DstAddr3
     487  zclGenericApp_HandleKeys
     205  zclGenericApp_Init
       1  zclGenericApp_NwkState
       1  zclGenericApp_OnOffSwitchActions
       1  zclGenericApp_OnOffSwitchType
      89  zclGenericApp_ProcessCommissioningStatus
      40  zclGenericApp_ProcessIdentifyTimeChange
       1  zclGenericApp_TaskID
     289  zclGenericApp_event_loop
       3  zclSampleApp_BatteryWarningCB
      48  -- Other

 
 1 174 bytes in segment BANKED_CODE
    48 bytes in segment BANK_RELAYS
     2 bytes in segment SFR_AN
    39 bytes in segment XDATA_I
    39 bytes in segment XDATA_ID
    12 bytes in segment XDATA_ROM_C
    43 bytes in segment XDATA_Z
 
    87 bytes of CODE     memory
     0 bytes of CONST    memory (+ 12 bytes shared)
     0 bytes of DATA     memory (+  2 bytes shared)
 1 174 bytes of HUGECODE memory
    82 bytes of XDATA    memory

Errors: none
Warnings: none
